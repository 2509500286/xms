@model Xms.Web.Customize.Models.EditQueryViewModel
@{
    var mainEntity = Model.EntityList.First();
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">
            <a data-toggle="collapse"
               href="#collapseTwo">
                <strong>@Model.EntityMetaData.LocalizedName - @app.PageTitle</strong>
            </a>
        </h3>
    </div>
    <div id="collapseTwo" class="panel-collapse collapse in">
        <div class="panel-body">
            <form action="/@app.OrganizationUniqueName/customize/@app.ControllerName/@app.ActionName" method="post" id="editform" class="form-horizontal" role="form">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary()
                @Html.HiddenFor(x => x.SolutionId)
                @Html.HiddenFor(x => x.QueryViewId)
                @Html.HiddenFor(x => x.EntityId)
                @Html.HiddenFor(x => x.FetchConfig)
                @Html.HiddenFor(x => x.LayoutConfig)
                <input type="hidden" id="AggregateConfig" name="AggregateConfig" value="@Model.AggregateConfig" />
                <input type="hidden" id="savetype" name="savetype" value="save" />
                <input type="hidden" id="EntityName" name="EntityName" value="@Model.EntityMetaData.Name" />
                <ul id="myTab" class="nav nav-tabs">
                    <li class="active">
                        <a href="#info" data-toggle="tab">
                            视图信息
                        </a>
                    </li>
                    <li>
                        <a href="#rowcommand" data-toggle="tab">
                            行事件设置
                        </a>
                    </li>
                    <li>
                        <a href="#buttons" data-toggle="tab">
                            按钮设置
                        </a>
                    </li>
                </ul>
                <div id="myTabContent" class="tab-content">
                    <div class="tab-pane in active" id="info" style="padding:5px;">
                        <div class="form-group col-sm-12">
                            @Html.LabelFor(x => x.Name, "名称", new { @class = "col-sm-2 control-label" })
                            <div class="col-sm-10">
                                @Html.TextBoxFor(x => x.Name, new { @class = "form-control required" })
                            </div>
                        </div>
                        <div class="form-group col-sm-12 hide">
                            @Html.LabelFor(x => x.IsDefault, "默认视图", new { @class = "col-sm-2 control-label" })
                            <div class="col-sm-10">
                                <label class="checkbox-inline">
                                    @Html.RadioButtonFor(x => x.IsDefault, true, new { @class = "required" }) 是
                                </label>
                                <label class="checkbox-inline">
                                    @Html.RadioButtonFor(x => x.IsDefault, false, new { @class = "required" }) 否
                                </label>
                            </div>
                        </div>
                        <div class="form-group col-sm-12">
                            <label class="col-sm-2 control-label" for="JsLibrary">JS库</label>
                            <div class="col-sm-10">
                                <input type="text" class="form-control input-sm lookup" name="jslibrary_text" id="jslibrary_text" />
                                <input type="hidden" name="jslibrary" id="jslibrary" />
                            </div>
                        </div>
                        <div class="form-group col-sm-12 hide">
                            @Html.LabelFor(x => x.IsSimpleFilter, "简单过滤模式", new { @class = "col-sm-2 control-label" })
                            <div class="col-sm-10">
                                <label class="checkbox-inline">
                                    @Html.RadioButtonFor(x => x.IsSimpleFilter, true, new { @class = "required" }) 启用
                                </label>
                                <label class="checkbox-inline">
                                    @Html.RadioButtonFor(x => x.IsSimpleFilter, false, new { @class = "required" }) 禁用
                                </label>
                            </div>
                        </div>
                        <div class="form-group col-sm-12">
                            @Html.LabelFor(x => x.Description, "描述", new { @class = "col-sm-2 control-label" })
                            <div class="col-sm-10">
                                @Html.TextAreaFor(x => x.Description, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group col-sm-12">
                            <label for="TargetFormId" class="col-sm-2 control-label">默认表单</label>
                            <div class="col-sm-10">
                                <select id="TargetFormId" name="TargetFormId" class="form-control" data-value="@Model.TargetFormId"></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">角色授权</label>
                            <div class="col-sm-1">
                                <label class="checkbox-inline">
                                    @if (Model.IsAuthorization == false)
                                    {
                                        <input type="checkbox" name="IsAuthorization" id="IsAuthorization" value="true" class=" xms-checkbox" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" name="IsAuthorization" checked id="IsAuthorization" value="true" class=" xms-checkbox" />
                                    }
                                </label>
                            </div>
                            <div class="col-sm-3 hide" id="securityUserBox">
                                <select id="securityUser" name="AssignRoleId" class=" form-control" data-value="@(Model.AssignRoleId!=null?(string.Join(",", Model.AssignRoleId)):"")" multiple></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-4">
                                <label for="sortable" class="col-sm-12">记录类型</label>
                                <div class="col-sm-12">
                                    <div id="entitydefaultoption" class="hide"><option data-relationship="" data-referencingattributelocalizedname="" value="@Model.EntityId">@Model.EntityMetaData.LocalizedName</option></div>
                                    <select id="entities" class="form-control">
                                        <option data-relationship="" data-referencingattributelocalizedname="" value="@Model.EntityId">@Model.EntityMetaData.LocalizedName</option>
                                    </select>
                                    <div class="bg-info" style="height:220px; overflow-y:scroll;">
                                        <ul id="attributes" class="list-unstyled connectedSortable" data-bind="foreach: items" style="background:#eee; line-height:25px; height:30px;">
                                            <li class="ui-state-default" data-bind="text: localizedname, attr: { 'data-name': name, 'data-entityname': entityname, 'data-entitylocalizedname': entitylocalizedname }">
                                                <span class="glyphicon glyphicon-screenshot"></span>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-8">
                                <label for="sortable" class="col-sm-12">列表排版</label>
                                <div class="col-sm-12" style="height:220px; " id="tableReWidth">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-info btn-xs" onclick="moveColumn('before')" title="左移">
                                            <span class="glyphicon glyphicon-arrow-left"></span> 左移
                                        </button>
                                        <button type="button" class="btn btn-info btn-xs" onclick="moveColumn('after')" title="右移">
                                            <span class="glyphicon glyphicon-arrow-right"></span> 右移
                                        </button>
                                        <button type="button" class="btn btn-info btn-xs" onclick="removeColumn()" title="删除">
                                            <span class="glyphicon glyphicon-trash"></span> 删除
                                        </button>
                                        <button type="button" class="btn btn-info btn-xs" onclick="openFilter()" title="过滤条件">
                                            <span class="glyphicon glyphicon-filter"></span> 过滤条件
                                        </button>
                                        <button type="button" class="btn btn-info btn-xs" onclick="openSortModal()" title="排序">
                                            <span class="glyphicon glyphicon-sort"></span> 排序
                                        </button>
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-condensed tableResize-box" id="editFormTable" style="width:auto;">
                                            <caption></caption>
                                            <thead>
                                                <tr id="views" class="connectedSortable" style="height:50px; background:#eee;">
                                                    <th class="small text-danger ui-state-disabled shadow hide">从左边将属性拖放到这里</th>
                                                    @{var thwidth = 0;}
                                                    @foreach (var cell in Model.Grid.Rows[0].Cells)
                                                    {
                                                        var k = cell.Name.ToLower();
                                                        var label = cell.Name;
                                                        Xms.Schema.Domain.Attribute attr = null;
                                                        if (cell.EntityName.ToLower().Equals(mainEntity.Name.ToLower()) && cell.Name.IndexOf(".") < 0)
                                                        {
                                                            attr = Model.AttributeList.Find(n => n.EntityId == mainEntity.EntityId && String.Equals(n.Name, k, StringComparison.CurrentCultureIgnoreCase));
                                                            label = attr != null ? attr.LocalizedName : k;
                                                        }
                                                        else
                                                        {
                                                            attr = Model.AttributeList.Find(n => String.Equals(n.EntityName, cell.EntityName, StringComparison.CurrentCultureIgnoreCase) && String.Equals(n.Name, k.Split('.')[1], StringComparison.CurrentCultureIgnoreCase));
                                                            label = attr != null ? attr.LocalizedName + "(" + attr.EntityLocalizedName + ")" : k;
                                                        }
                                                        if (attr == null) { continue; }
                                                        var relationship = cell.Name.IndexOf(".") > 0 ? cell.Name.Split('.')[0] : "";
                                                        thwidth += cell.Width;
                                                        if (!string.IsNullOrWhiteSpace(cell.Label))
                                                        {
                                                            label = cell.Label;
                                                        }
                                                        <th style="width:@(cell.Width+"px")" class="tableHeaderItem" data-name="@attr.Name.ToLower()" data-relationship="@relationship" data-type="@attr.AttributeTypeName" data-entityname="@attr.EntityName" data-entitylocalizedname="@attr.EntityLocalizedName" data-referencedentityid="@attr.ReferencedEntityId" data-width="@cell.Width" data-isvisibled="@(!cell.IsHidden)" data-localizedname="@label" data-label="@cell.Label" data-optionsetid="@attr.OptionSetId" data-attributesid="@attr.AttributeId" data-sorttype="" data-sortnum="">
                                                            <span class="th-label">@label</span>
                                                        </th>

                                                    }
                                                    @*<th class="small text-danger ui-state-disabled shadow">从左边将属性拖放到这里</th>*@
                                                </tr>
                                                <input type="hidden" id="tableheaderWidth" value="@thwidth" />
                                            </thead>
                                            <tbody>
                                                <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                                <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                                <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                                <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                                <tr><td class="small text-muted ui-state-disabled shadow">数据</td></tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-10">
                                <div class="col-sm-12">
                                    <label class="col-sm-2 control-label">展示更多</label>
                                    <div class="col-sm-1">
                                        <label class="checkbox-inline">
                                             <input type="checkbox" name="isShowTab" id="isShowTab" value="true" class="isshowtab" />
                                        </label>
                                    </div>
                                </div>
                                <div class="col-sm-12 hide"   id="extEntityTabs"></div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" id="buttons" style="padding:5px;">
                        <div class="row">
                            <div class="form-group col-sm-12">
                                @Html.LabelFor(x => x.IsCustomButton, app.T["queryview_buttons"], new { @class = "col-sm-2 control-label" })
                                <div class="col-sm-10">
                                    <label class="checkbox-inline">
                                        @Html.RadioButtonFor(x => x.IsCustomButton, false, new { @class = "required" }) @app.T["queryview_allbutton"]
                                    </label>
                                    <label class="checkbox-inline">
                                        @Html.RadioButtonFor(x => x.IsCustomButton, true, new { @class = "required" }) @app.T["queryview_custombutton"]
                                    </label>
                                </div>
                            </div>
                            <div class="form-group col-sm-12@(Model.IsCustomButton?"":" hide")" id="existsButtons">
                                <label class="col-sm-2 control-label">设置按钮</label>
                                <div class="col-sm-10 table-responsive">
                                    <table class="table table-bordered table-condensed">
                                        <thead>
                                            <tr>
                                                <th style="white-space: nowrap;"><input type="checkbox" name="checkall"> 显示</th>
                                                <th style="white-space: nowrap;">按钮</th>
                                                <th style="white-space: nowrap;">位置</th>
                                                <th style="white-space: nowrap;">JS</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model.Buttons)
                                            {
                                                var flag = Model.ButtonId.NotEmpty() ? Model.ButtonId.Contains(item.RibbonButtonId) : false;
                                                <tr>
                                                    <td>
                                                        <input type="checkbox" name="buttonid" value="@item.RibbonButtonId" @(flag ? " checked" : "") />
                                                    </td>
                                                    <td>@item.Label</td>
                                                    <td>@item.ShowArea</td>
                                                    <td>@item.JsLibrary (@item.JsAction)</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane rowcommand-box" id="rowcommand" style="padding:5px;">
                        <div class="well" style="position:relative;display:none;">
                            <span class="removeView glyphicon glyphicon-remove" style="position: absolute;right: 2px;top: 2px;cursor:pointer" onclick="removeView(this)"></span>

                            <div class="rowC-item" style="padding:10px;display: inline-block;">
                                <label class="text-muted">类型：</label>
                                <select class="EventType form-control input-sm" style="width: 95px;display: inline;">
                                    <option value="onbinding">行绑定时</option>
                                </select>
                            </div>
                            <div class="rowC-item" style="padding:10px;display: inline;" class="AttributeName">
                                <label class="text-muted">逻辑：</label>
                                <select class="LogicalOperator form-control input-sm" style="width: 70px;display: inline;">
                                    <option value="or">或者</option>
                                    <option value="and">并且</option>
                                </select>
                            </div>
                            <div style="display: inline-table;" class="rowC-item judgeBox">
                                <div class="judgeView" style="width:527px;display:inline;">
                                    <div style="padding:10px;display:inline;" class="AttributeName">
                                        <label class="text-muted">字段：</label>
                                        <select class="ziduan form-control input-sm" style="width: 80px;display: inline;"></select>
                                    </div>

                                    <div style="padding:10px;display: inline-block;">
                                        <label class="text-muted">操作符：</label>
                                        <select class="Operator form-control input-sm" style="width: 70px;display: inline;">
                                            <option value="Equel">等于</option>
                                        </select>
                                    </div>
                                    <div style="padding:10px;display: inline-block;">
                                        <label class="text-muted">值：</label>
                                        <span class="Values">
                                            <input type='text' class='form-control' name="value" data-value="" style='' placeholder='输入值' value=''>
                                        </span>
                                    </div>
                                    <span class="addMove glyphicon glyphicon-plus" onclick="checkAdd(this)" style="cursor:pointer;"></span>
                                </div>

                            </div>
                            <div class="rowC-item" style="padding:10px;display: inline-block;">
                                <label class="text-muted">动作类型：</label>
                                <select class="ActionType form-control input-sm" style="width: 90px;display: inline;">
                                    <option value="SetRowBackground">背景色</option>
                                </select>
                            </div>

                            <div class="ColorBack rowC-item" style="padding:10px;display: inline;">
                                <div class="actionSet" style="display: inline;" data-key="color">
                                    <label class="text-muted">颜色： </label>
                                    <span class="ColorSite">
                                        <input type='text' class='form-control actioncolor colorpicker' data-value="" style='display: inline;height:30px;width: 70px;' placeholder='输入值' value=''>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="addView btn btn-info" style="width:70px;height:36px;" onclick="addView()">增加</div>
                    </div>
                </div>
                <div class="form-group col-sm-12 text-center" id="form-buttons">
                    <button type="button" class="btn btn-primary" onclick="Save('save')"><span class="glyphicon glyphicon-saved"></span> @app.T["save"]</button>
                    <button type="button" class="btn btn-primary" onclick="Save('saveandnew')"><span class="glyphicon glyphicon-floppy-saved"></span> @app.T["saveandnew"]</button>
                    <button type="button" class="btn btn-primary" onclick="Save('saveas')"><span class="glyphicon glyphicon-floppy-save"></span> @app.T["saveas"]</button>
                    <button type="reset" class="btn btn-default" onclick="Reset()"><span class="glyphicon glyphicon-refresh"></span> @app.T["reset"]</button>
                </div>
            </form>
        </div>

    </div>
</div>
<!--排序设置-->
<div class="modal fade" id="sortModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    排序设置
                </h4>
            </div>
            <div class="modal-body ">
                <div class="form-group col-sm-12">
                    <label for="sortparm1" class="col-sm-12">第一排序依据</label>
                    <div class="col-sm-8">
                        <select onchange="changeSort(this)" id="sortparm1" name="sortparm1" class="form-control input-sm">
                            <option value="">默认</option>
                        </select>
                    </div>
                    <div class="col-sm-4">
                        <label><input type="radio" name="sorttype1" value="ascending" checked="checked" />升序</label>
                        <label><input type="radio" name="sorttype1" value="descending" />降序</label>
                    </div>
                </div>
                <div class="form-group col-sm-12">
                    <label for="sortparm2" class="col-sm-12">第二排序依据</label>
                    <div class="col-sm-8">
                        <select onchange="changeSort(this)" id="sortparm2" name="sortparm2" class="form-control input-sm"></select>
                    </div>
                    <div class="col-sm-4">
                        <label>
                            <input type="radio" name="sorttype2" value="ascending" checked="checked" />升序
                        </label>
                        <label><input type="radio" name="sorttype2" value="descending" />降序</label>
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="saveSortParams()">
                    确定更改
                </button>
            </div>
        </div>
    </div>
</div><!-- /.modal -->
<!-- 列参数设置（Modal） -->
<div class="modal fade" id="columnModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    列参数
                </h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="columnattributename">字段</label>
                    <input id="columnattributename" name="columnattributename" readonly type="text" class="form-control input-sm" />
                </div>
                <div class="form-group">
                    <label for="columnlabel">标签</label>
                    <input id="columnlabel" name="columnlabel" type="text" class="form-control input-sm" />
                </div>
                <div class="form-group">
                    <label for="columnwidth">宽度</label>
                    <input id="columnwidth" name="columnwidth" type="text" class="form-control input-sm" />
                </div>
                <div class="form-group">
                    <label for="columnvisibled">
                        显示
                        <input id="columnvisibled" name="columnvisibled" type="checkbox" />
                    </label>
                </div>
                <div class="form-group">
                    <label for="columnstatistical">统计</label>
                    <select id="columnstatistical" name="columnstatistical" type="text" class="form-control input-sm">
                        <option value="">请选择</option>
                        <option value="Sum">总和</option>
                        <option value="Max">最大值</option>
                        <option value="Min">最小值</option>
                        <option value="Avg">平均值</option>
                    </select>
                </div>
                @*<div class="form-group">
            <label for="sorttype">排序</label>
            <select id="sorttype" name="sorttype" class="form-control input-sm">
                <option value="">请选择</option>
                <option value="ascending">升序</option>
                <option value="descending">降序</option>
            </select>
        </div>*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="saveColumnParams()">
                    确定更改
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!-- 过滤条件设置（Modal） -->
<div class="modal fade" id="filterModal" tabindex="-1" role="dialog"
     aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" style="width:700px; height:500px;">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"
                        aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title" id="myModalLabel">
                    过滤条件设置
                </h4>
            </div>
            <div class="modal-body">
                <div class="table-responsive" style="width:650px; height:400px; overflow:auto;">
                    <div class="form-group">
                        <div class="btn-group btn-group-xs">
                            <button type="button" class="btn btn-info" onclick="clearConditions()">
                                <span class="glyphicon glyphicon-trash"></span> 清空
                            </button>
                            <button type="button" class="btn btn-info" onclick="groupConditions('and')">
                                <span class="glyphicon glyphicon-link"></span> "并且"组合
                            </button>
                            <button type="button" class="btn btn-info" onclick="groupConditions('or')">
                                <span class="glyphicon glyphicon-link"></span> "或者"组合
                            </button>
                        </div>
                    </div>
                    <div class="form-group">
                        <table id="filterConditions" class="table table-condensed table-selected">
                            <thead class="hide">
                                <tr>
                                    <th></th>
                                    <th>名称</th>
                                    <th>比较关系</th>
                                    <th>数值</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                            <tfoot>
                                <tr class="hide filterrow">
                                    <td style="width:10px;">
                                        <input type="checkbox" />
                                    </td>
                                    <td style="width:33%">
                                        <select name="filtername" class="form-control input-sm" onchange="onChangeAttribute(this)"></select>
                                    </td>
                                    <td style="width:33%">
                                        <select name="filteroperator" class="form-control input-sm" defaultselected="eq"><option value="eq" title="等于">等于</option><option value="ne" title="不等于">不等于</option><option value="not-null" title="包含数据">包含数据</option><option value="null" title="不包含数据">不包含数据</option><option value="contains" title="包含" fetchop="like" fetchval="%{0}%">包含</option><option value="doesnotcontain" title="不包含" fetchop="not-like" fetchval="%{0}%">不包含</option><option value="beginswith" title="开头等于" fetchop="like" fetchval="{0}%">开头等于</option><option value="doesnotbeginwith" title="开头不等于" fetchop="not-like" fetchval="{0}%">开头不等于</option><option value="endswith" title="结尾等于" fetchop="like" fetchval="%{0}">结尾等于</option><option value="doesnotendwith" title="结尾不等于" fetchop="not-like" fetchval="%{0}">结尾不等于</option></select>
                                    </td>
                                    <td style="width:33%">
                                        <input type="text" name="filtervalue" class="form-control input-sm" />
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="4">
                                        <select id="filternamelist" name="filtername" class="form-control input-sm" onchange="addCondition(this)">
                                            <option value="">请选择</option>
                                        </select>
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    <span class="glyphicon glyphicon-remove"></span>
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="saveFilter()">
                    <span class="glyphicon glyphicon-ok"></span>
                    确定更改
                </button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
@section Header{
    <link rel="stylesheet" href="/content/js/jquery-ui-1.10.3/themes/base/jquery.ui.theme.css?v=@app.PlatformSettings.VersionNumber">
    <link href="/content/js/bootstrap-datepicker-1.5.0/css/bootstrap-datepicker3.min.css?v=@app.PlatformSettings.VersionNumber" rel="stylesheet">
    <link href="/content/css/sumoselect.css?v=@app.PlatformSettings.VersionNumber" rel="stylesheet" />
    <link href="/content/js/colorpicker/spectrum.css?v=@app.PlatformSettings.VersionNumber" rel="stylesheet" />

    <style>
        .ui-state-highlight {
            /*height: 25px;
            line-height: 25px;*/
            width: 50px;
            border-bottom: 3px #000 solid;
            list-style: none;
            height: 50px;
        }

        .selected {
            border: 1px solid blue;
            background: #d9edf7;
        }

            .selected a {
                font-weight: bolder;
            }

        .table {
            margin-bottom: 0px !important;
        }

        #attributes li {
            cursor: move;
            padding-left: 5px;
            padding-right: 5px;
        }
    </style>
}
@section Scripts {
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.core.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.widget.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.mouse.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.sortable.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.draggable.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-ui-1.10.3/ui/jquery.ui.droppable.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery.form.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-validate/jquery.validate.min.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery-validate/localization/messages_zh.min.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/xms.metadata.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/xms.utility.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/bootstrap-datepicker-1.5.0/js/bootstrap-datepicker.min.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/bootstrap-datepicker-1.5.0/locales/bootstrap-datepicker.zh-CN.min.js?v=@app.PlatformSettings.VersionNumber" charset="UTF-8"></script>
    <script src="/content/js/filterdialog.js?v=23244_@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/fetch.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/colorpicker/spectrum.js?v=@app.PlatformSettings.VersionNumber"></script>
    <script src="/content/js/jquery.sumoselect.js?v=@app.PlatformSettings.VersionNumber"></script>
    @{await Html.RenderPartialAsync("FetchLabel"); }
    <script>
    var savetype = 'save';
    var QueryObject = @Html.Raw(Model.QueryExpression.SerializeToJson(false));
        var Relationships;
        var AttributesList = [];
        var EntityId = $('#EntityId').val();
        var EntityName=$('#EntityName').val();
        var FetchConfig=JSON.parse($('#FetchConfig').val());
        $(function () {
            //编辑时初始排序start
            var Orders=QueryObject.Orders;
            for(var i=0;i<Orders.length;i++){
                var oName=Orders[i].AttributeName;
                if(Orders[i].AttributeName.indexOf('.')==-1){
                    var that=$('#views').find('th[data-relationship=""][data-name="'+oName+'"]');
                    if(Orders[i].OrderType==0){
                        that.attr('data-sorttype','ascending');
                    }else{
                        that.attr('data-sorttype','descending');
                    }
                    if(i==0){
                        that.attr('data-sortnum','one');
                    }else{
                        that.attr('data-sortnum','two');
                    }
                }
                else{
                    var oItem=Orders[i].AttributeName.split('.');
                    var oRelationship=oItem[0];
                    oName=oItem[1];
                    var that=$('#views').find('th[data-relationship="'+oRelationship+'"][data-name="'+oName+'"]');
                    if(Orders[i].OrderType==0){
                        that.attr('data-sorttype','ascending');
                    }else{
                        that.attr('data-sorttype','descending');
                    }
                    if(i==0){
                        that.attr('data-sortnum','one');
                    }else{
                        that.attr('data-sortnum','two');
                    }
                }
            }
            //编辑时初始排序end
            $(".modal").draggable({
                handle: ".modal-header",
                cursor: 'move',
                refreshPositions: false
            });
            var $editform = $('#editform');
            $editform.on('submit', function () {
                saveRowCommandValue();
            })
            //表单验证
            Xms.Web.Form($editform, function (response) {
                if (response.IsSuccess) {
                    if (savetype == 'saveandnew') {
                        location.href = 'createqueryview?entityid=' + $('#EntityId').val() + '&solutionid=' + $('#SolutionId').val();
                    }
                    else {
                        Xms.Web.Alert(true, response.Content);
                    }
                    return;
                }
                Xms.Web.Alert(false, response.Content);
            },'', function () {

                if ($("#views").find('th:not(.shadow)').length <= 0) {
                    Xms.Web.Alert(false, '请至少选择一个字段');
                    return false;
                }
                var $isauthorization = $('#IsAuthorization');
                if ($isauthorization.prop('checked')) {
                    if (!$('#securityUser').val() || $('#securityUser').val() == '') {
                        Xms.Web.Alert(false, "请先勾选角色");
                        return false;
                    }
                }
                var flag = saveRowCommandValue();
                if(flag==false && flag.length!=0){
                    Xms.Web.Alert(false,'请先选择行事件的字段名和操作符');
                    return false;
                }
            });
            $editform.find("input[name=checkall]:not(:disabled)").on('click', null, function () {
                var flag = $(this).prop("checked");
                if (flag) {
                    $editform.find("input[name=buttonid]:not(:disabled)").prop("checked", true);
                    $editform.find("tbody > tr").addClass("active");
                }
                else {
                    $editform.find("input[name=buttonid]:not(:disabled)").removeProp("checked");
                    $editform.find("tbody > tr").removeClass("active");
                }
            });
            $.get(ORG_SERVERURL + '/filter/screenconditions', null, function (data) {
                $('#filterModal').find('.modal-body').replaceWith(data);
            })
            $('body').on('change', 'select[name=filteroperator]', function () {
                var type = $(this).parent().prev().find('option:selected').attr('data-type');
                var attributeid = $(this).parent().prev().find('option:selected').attr('data-attributeid');
                var optionsetid = $(this).parent().prev().find('option:selected').attr('data-optionsetid');
                FilterDialog.bindInput($(this), $(this).parent().next().find('input'), type, attributeid, $('#EntityId').val(), getDdlItems(type),optionsetid,undefined,{multiSelector:true})

            })
            $('#views').find('th:not(.shadow)').each(function(i,n){
                var lihtml='<li class="ui-state-default" data-relationship="'+$(n).attr('data-relationship')+'" data-referencingattributelocalizedname="'+$(n).attr('data-referencingattributelocalizedname')+'" data-type="'+$(n).attr('data-type')+'" data-name="'+$(n).attr('data-name')+'" data-referencedentityid="'+$(n).attr('data-referencedentityid')+'" data-localizedname="'+$(n).attr('data-localizedname')+'" data-entityname="'+$(n).attr('data-entityname')+'" data-entitylocalizedname="'+$(n).attr('data-entitylocalizedname')+'"><span class="glyphicon glyphicon-screenshot"></span>'+$(n).text()+'</li>';
                var item = {
                    'name': $(n).attr('data-name'),
                    'entityname': $(n).attr('data-entityname')||'',
                    'referencedentityid': $(n).attr('data-referencedentityid')||'',
                    'html': lihtml,
                    'relationship': $(n).attr('data-relationship')||'',
                    'text':$(n).text() || ''
                };
                AttributesList.push(item);
                $('#views').parent().siblings('tbody').find('tr').append('<td class="small text-muted ui-state-disabled">数据</td>');
            });
            $('#views').parent().siblings('tbody').find('td.shadow').addClass('hide');
            $("#attributes, #views").sortable({
                connectWith: ".connectedSortable"
                , placeholder: "ui-state-highlight"
                //, revert: true
                , opacity: 0.3
                //, forcePlaceholderSize: true
                , cursor: "move"
                , cancel: ".ui-state-disabled"
                ,stop:function(){
                    resetTableWidth();
                    resizeTableHead();
                    saveGridConfig();
                }
            }).disableSelection();
            $("#attributes").on("sortreceive", function (event, ui) {
                //console.log(event, ui);
                var old = $("#attributes").find('th');
                old.find('span').removeClass('hide');
                var name = li.attr('data-name').toLowerCase();
                var relationship = li.attr('data-relationship') || '';
                var entityname = li.attr('data-entityname').toLowerCase();
                var datatype = li.attr('data-type').toLowerCase();
                var entitylocalizedname = li.attr('data-entitylocalizedname');
                var referencingattributelocalizedname = li.attr('data-referencingattributelocalizedname') || '';
                var referencingattributename = li.attr('data-referencdattributename') || '';
                var referencedentityid = li.attr('data-referencedentityid') || '';
                var referencingattributename = li.attr('data-referencdattributename') || '';
                var referencedentityid = li.attr('data-referencedentityid') || '';
                var attributesid = li.attr('data-attributesid') || '';
                var optionsetid = li.attr('data-optionsetid') || '';
                var el = $('<li class="ui-state-default">' + old.text() + '</li>');
                el.attr({ 'data-relationship': relationship,'data-type':datatype, 'data-referencingattributelocalizedname': referencingattributelocalizedname, 'data-name': name, 'data-entityname': entityname,'data-referencingattributename':referencingattributename, 'data-entitylocalizedname': entitylocalizedname,'data-referencedentityid':referencedentityid,'data-attributesid':attributesid,'data-optionsetid':optionsetid, 'data-width': 100, 'data-visibled': true, 'data-sorttype': '' });
                old.replaceWith(el);
                saveGridConfig();

            });
			/*双击列表自动添加到表格里*/
			$("#attributes").on('dblclick','li',function(){
				$("#views").append($(this));
				$("#views").trigger('sortreceive');
				resizeTableHead();
			});
			$("#views").on("sortreceive", function (event, ui) {
                //console.log(event, ui);
                var li = $("#views").find('li');
                li.find('span').addClass('hide');
                var name = li.attr('data-name').toLowerCase();
                var relationship = li.attr('data-relationship') || '';
                var entityname = li.attr('data-entityname').toLowerCase();
                var datatype = li.attr('data-type').toLowerCase();
                if (attributeIsExists(entityname, name, relationship)) return;//已存在
                var entitylocalizedname = li.attr('data-entitylocalizedname');
                var referencingattributelocalizedname = li.attr('data-referencingattributelocalizedname') || '';
                var referencingattributename = li.attr('data-referencdattributename') || '';
                var referencedentityid = li.attr('data-referencedentityid') || '';
                var attributesid = li.attr('data-attributesid') || '';
                var optionsetid = li.attr('data-optionsetid') || '';
                var localizedname = li.attr('data-localizedname') || '字段名';
                //var text = entityname == QueryObject.EntityName.toLowerCase() ? li.text() : li.text() + '(' + entitylocalizedname + ')';
                var text = relationship ? localizedname + '(' + referencingattributelocalizedname + ')' : localizedname;
                var el = $('<th style="width:100px;" class="tableHeaderItem"><span class="th-label">' + text + '</span></th>');
                el.attr({ 'data-relationship': relationship,'data-type':datatype, 'data-referencingattributelocalizedname': referencingattributelocalizedname, 'data-name': name, 'data-entityname': entityname,'data-referencedentityid':referencedentityid,'data-referencingattributename':referencingattributename, 'data-entitylocalizedname': entitylocalizedname, 'data-width': 100,'data-attributesid':attributesid,'data-optionsetid':optionsetid,'data-localizedname':localizedname,'data-label':text, 'data-visibled': true, 'data-sorttype': '' });
                if ($("#views").find('th').length == 1)//如果只有一个占位列，则默认第一个加的排序
                {
                    el.attr({ 'data-sorttype': "ascending", 'data-sortnum': 'one' });
                }
                var item = {
                    'name': name,
                    'entityname': entityname,
                    'html': li.clone(),
                    'relationship': relationship,
                    'text':text
                    ,'localizedname':localizedname
                };
                AttributesList.push(item);

               // var tableWidth = 0;
                //$("#views").find('th:not(".shadow")').each(function () {
                //    tableWidth += $(this).outerWidth();
                //});
                //tableWidth += 100;
               // console.log('tableWidth', tableWidth);
			    //$("#views").parents('table').width(tableWidth);
                resetTableWidth();
                resizeTableHead();
                if ($("#views").find('th').length <= 1) {
                    $("#views").append(el);
                    li.remove();
                }
                else {
                    li.replaceWith(el);
                }
                $("#views").parents('table').find('tbody tr').append('<td class="small text-muted ui-state-disabled">数据</td>');
                $("#views").parents('table').find('.shadow').addClass('hide').width(0);
                saveGridConfig();

                  //  addAttributeToInput();

            });
            $("#views").on("sortremove", function (event, ui) {
                var td = $("#views").parents('table').find('tbody tr').find('td:last');
                if (td) td.remove();
                if ($("#views").find('th:not(.shadow)').length == 0)
                    $("#views").parents('table').find('.shadow').removeClass('hide');
                saveGridConfig();
            });

            $.when(loadEntities()).done(loadAttributes());
            loadFilterAttributes();

            //列表列选中
            $("#views").on('dblclick', 'th', function () {
                $(this).parent().siblings().removeClass('selected');
                $(this).parent().addClass('selected');
                editColumnParams();
            });
            $("#views").on('click', 'th', function () {
                $("#views").find('th').removeClass('selected');
                $(this).toggleClass('selected');
            });
            //过滤条件行单击时选中
            //Xms.Web.TableSelected('.table-selected', '.filterrow');
            $('#filterConditions').on('click', ':checkbox', function (e) {//input[name=filtergroup]
                var ischecked = $(this).prop('checked');
                if (ischecked) {
                    $(this).parents('tr').first().addClass('active');
                }
                else {
                    $(this).parents('tr').first().removeClass('active');
                }
            });
            $('#entities').on('change', null, function (e) {
                loadAttributes();
            });
            //按钮
            $('#editform').on('click', 'input[name=iscustombutton]', function (e) {
                var flag = $(this).val();
                if (flag == 'True') {
                    $('#existsButtons').removeClass('hide');
                }
                else {
                    $('#existsButtons').addClass('hide');
                }
            });

            var $isauthorization = $('#IsAuthorization');
            var entityname = 'roles';
            var filter = { "Conditions": [{ "AttributeName": entityname == 'roles' ? "statecode" : "statecode", "Operator": 0, "Values": [1] }] }
            var queryObj = { EntityName: entityname, Criteria: filter, ColumnSet: { allcolumns: true } };
            var data = JSON.stringify({ "query": queryObj, "isAll": true });
            Xms.Web.GetJson('/api/data/Retrieve/Multiple', data, function (response) {
                console.log(response);
                if (response.content && response.content.length > 0) {
                    //var datas = [];
                    var selectHtml = renderModityByData(response.content, 'roles');
                    $('#securityUser').html(selectHtml);
                    if ($isauthorization.prop('checked') && $('#securityUser').attr('data-value') != '') {
                        var values = $('#securityUser').attr('data-value').split(',');
                        $.each(values, function (key,item) {
                            $('#securityUser').find('option[value="' + item + '"]').prop('selected', true);
                        });
                    }
                    $('#securityUser').SumoSelect({
                        placeholder: '请选择',
                        captionFormat: '{0} 已选择', // format of caption text. you can set your locale.
                        captionFormatAllSelected: '{0} 全部已选择!',
                    });
                }
            }, null, null, 'post');
            $('.xms-checkbox').xmsCheckbox({
                trueHandler: function () {
                    $('#securityUserBox').removeClass('hide');

                }
                , falseHandler: function () {
                    $('#securityUserBox').addClass('hide');
                }
            });
            if ($isauthorization.prop('checked')) {
                $('#securityUserBox').removeClass('hide');
            }
            resetTableWidth();
            resizeTableHead();

            getFormsList($('#EntityId').val(), $('#TargetFormId'),false,function(){
                var _value = $('#TargetFormId').attr('data-value');
                $('#TargetFormId>option[value="'+_value+'"]').prop('selected',true);
            });

            $('#jslibrary_text').lookup({
                disabled: true,
                dialog: function () {
                    Xms.Web.OpenDialog('/customize/WebResource/Dialog?singlemode=true&inputid=jslibrary_text', 'selectRecordCallback');
                }
                , clear: function () {
                    $('#jslibrary_text').val('');
                    $('#jslibrary').val('');
                    var _LayoutConfig = $('#LayoutConfig').val();
                    if (_LayoutConfig != "") {
                        var objRowdatas = JSON.parse(_LayoutConfig);
                    } else {
                        var objRowdatas = {};
                    }
                    var jslib = $('#jslibrary');
                        objRowdatas.ClientResources = [];
                        $('#LayoutConfig').val(JSON.stringify(objRowdatas));
                    
                }
            });

        });

        //获取表单列表
        function getFormsList(entityid, $context,isRequire, callback) {
            //加载forms列表
            var postParams = {
                type: 'forms' + entityid,
                data: { entityid: entityid }
            }
            Xms.Web.PageCache('systemform', '/customize/systemform/index', postParams, function (res) {
                var resItems = res.content;
                if (resItems && resItems.items) {
                    var _html = [];
                    if (isRequire == false) {
                        _html.push('<option data-formid="" data-solutionid="" value=""></option>');
                    }
                    $.each(resItems.items, function (i, n) {
                        _html.push('<option data-formid="' + n.systemformid + '" data-solutionid="' + n.solutionid + '" value="' + n.systemformid + '">' + n.name + '</option>');
                    });
                    $context.html(_html.join(''));
                    callback && callback();
                }
            }, true);
        }

        var AggregateType = {'datetime':['Max','Min'],'int':['Sum','Avg','Max','Min'],'float':['Sum','Avg','Max','Min'],'money':['Sum','Avg','Max','Min']};
        //打开窗口时获取是否需要统计
        function getAggregateConfig(type){
            var $columnstatistical  =$('#columnstatistical');

            var attrtype = AggregateType[type];
            if(!attrtype){
                $columnstatistical.parent().hide();
                return false;
            }
            $columnstatistical.parent().show();
            $columnstatistical.children().hide();
            $columnstatistical.children('option').each(function(i,n){
                $.each(attrtype,function(ii,nn){
                    if(nn==n.value){
                        $(n).show();
                    }
                });
            });
            $columnstatistical.children('option:first').show();
        }
        //关闭窗口时设置统计de值
        function setAggregateVal(name){
            var $columnstatistical  =$('#columnstatistical'),$AggregateConfig = $('#AggregateConfig');
            var $this = $('.selected:first','#views');
            var relationship = $this.attr('data-relationship');
            var _value = $AggregateConfig.val(),tempArr = [],res = null;
            if(_value!=''){
                tempArr = JSON.parse(_value);
            }
            if(relationship){
                name=relationship.toLowerCase()+'_'+name;
            }
            $.each(tempArr,function(key,item){
                if(item['AttributeName'].toLowerCase()==name.toLowerCase()){
                    res=item['AggregateType'];
                    return false
                }
            });
            console.log(res);
            $columnstatistical.children('option:first').prop('selected',true);
            if(res){
                $columnstatistical.val(res);
            }
        }
        //关闭窗口时设置统计de值
        function setAggregateConfig(name,value){
            var $AggregateConfig = $('#AggregateConfig'), res='';
            var $this = $('.selected:first','#views');
            var relationship = $this.attr('data-relationship');
            _value = $AggregateConfig.val(),tempArr = [];
            var _flag = false;
            if(relationship){
                name=relationship.toLowerCase()+'_'+name;
            }
            if(_value!=''){
                tempArr = JSON.parse(_value);
                if(value!=''){
                    $.each(tempArr,function(key,item){
                        if(item['AttributeName'].toLowerCase()==name.toLowerCase()){
                            item['AggregateType']=value;
                            _flag = true;
                            return false
                        }
                    });
                    if(_flag==false){
                        var _obj = {};
                        _obj['AttributeName'] = name;
                        _obj['AggregateType'] = value;
                        tempArr.push(_obj);
                    }
                }else{
                    var temp = null;
                    $.each(tempArr,function(key,item){
                        if(item['AttributeName'].toLowerCase()==name.toLowerCase()){
                            temp = key;
                            _flag = true;
                            return false
                        }
                    });
                    if(_flag==true){
                        tempArr.splice(temp,1);
                    }
                }

            }else{
                if(value!=''){
                    var _obj = {};
                    _obj['AttributeName'] = name;
                    _obj['AggregateType'] = value;
                    tempArr.push(_obj);
                }
            }

            console.log(tempArr);
            res = JSON.stringify(tempArr);
            if (res == '[]') {
                res = '';
            }
            $AggregateConfig.val(res);
        }

        function renderModityByData(data, type) {
            var _html = [];
            $.each(data, function (i, n) {
                var flag = false;
                n['rolesid'] = n['roleid'];
                _html.push('<option class="list-group-item" data-entityname="type" value="' + n['rolesid'] + '" data-value="' + n['rolesid'] + '">');
                _html.push(n.name);
                _html.push('</option>');
            });
            return _html.join('');
        }
        function settableheaderWidth(){
            var editFormTable = $("#editFormTable");
            var ths = editFormTable.find('th.tableHeaderItem');
            var widths = 0;
            ths.each(function(key,item){
                var _w = $(item).attr('data-width')*1;
                widths+=_w;
            });
            $('#tableheaderWidth').val(widths);
        }

        function resetTableWidth(){
            settableheaderWidth();
            var tableW = $('#tableheaderWidth').val()*1;
            var wrapW = $('#tableReWidth').width();//
            console.log(tableW,wrapW);
            if(tableW>=wrapW){
                $("#editFormTable").width(tableW)
            }else{
                $("#editFormTable").width('auto');
            }
        }

        function resizeTableHead() {
            //

            $("#editFormTable").tableHdResize({
                showTips: true
                , onResizeEnd: function (th) {
                    var w = th.outerWidth();
                    th.attr("data-width", w);
                    resetTableWidth();
                    saveGridConfig();
                }
                ,resetTableWidth:false
            });
        }
        //判断字段是否已加入列表
        function attributeIsExists(entityName, attrName, relationship) {
            entityName = entityName.toLowerCase();
            attrName = attrName.toLowerCase();
            //是否为关联实体字段
            if (relationship){//(entityName != QueryObject.EntityName.toLowerCase()) {
                //是否已存在
                var le = null;
                $(QueryObject.LinkEntities).each(function (ii, nn) {
                    if (nn.LinkToEntityName.toLowerCase() == entityName) {
                        le = nn;
                        return false;
                    }
                });
                if (le != null) {
                    if (~$.inArray(attrName, le.Columns.Columns)) {
                        if(relationship==le.EntityAlias){
                            return true;
                        }
                    }
                }
            }
            else {
                if (~$.inArray(attrName, QueryObject.ColumnSet.Columns)) {
                    return true;
                }
            }
            return false;
        }
        //加载实体，两个字段同时引用同一实体时？
        function loadEntities() {
            var dfd = $.Deferred();
            var entityid = $('#EntityId').val();
            Xms.Schema.GetEntityRelations( entityid ,null, function (data) {
                if (!data) return;
                var _htmls = [];
                $(data).each(function (i, n) {
                   //
                    var  _html='<option data-relationship="' + n.name + '" data-entityid="' + n.entityid + '" data-referencingattributelocalizedname="' + n.referencingattributelocalizedname + '" data-referencingattributename="'+n.referencingattributename+'" value="' + n.referencedentityid + '">' + n.referencingattributelocalizedname + '(' + n.referencedentitylocalizedname + ')' + '</option>';
                    _htmls.push(_html);
                });
                var entityhtml = $('#entitydefaultoption').html();
                $('#entities').html(entityhtml+_htmls.join(''));
               // console.log('_html',_html);

                // Xms.Web.SelectedValue($('#entities'), entityid);
                $('#entities').find('option:first').prop('selected',true);
                dfd.resolve();
            });
            return dfd.promise();
        }
        var rowcommondAttributes = null;
        //加载字段
        function loadAttributes() {
            var entityid = Xms.Web.SelectedValue($('#entities')) || $('#EntityId').val();
            var relationship = $('#entities').find('option:selected').attr('data-relationship') || '';
            var referencingattributelocalizedname = $('#entities').find('option:selected').attr('data-referencingattributelocalizedname') || '';
            var _html = new Array();
            Xms.Schema.GetAttributesByEntityId(entityid,  function (data) {
                if (!data ) return;
                console.log('data.content.items',data);
                if(rowcommondAttributes==null){
                    rowcommondAttributes = data;
                }
                var attributename = $('#entities option:selected').attr('data-referencingattributename')
                $(data).each(function (i, n) {
                    //console.log(n.entityname, n.name, attributeIsExists(n.entityname, n.name));
                    if (attributeIsExists(n.entityname, n.name, relationship) == false) {
                        _html.push('<li class="ui-state-default" data-relationship="' + relationship + '" data-referencingattributelocalizedname="' + referencingattributelocalizedname + '" data-type="'+n.attributetypename+'" data-referencdentityname="'+n.referencedentityname+'" data-name="' + n.name + '" data-entityname="' + n.entityname + '" data-referencdattributename="'+(attributename || '')+'" data-entitylocalizedname="' + n.entitylocalizedname + '" data-referencedentityid="'+n.referencedentityid+'" data-attributesid="'+(n.attributeid|| "")+'" data-localizedname="'+n.localizedname+'" data-optionsetid="'+(n.optionsetid || "")+'">');
                        _html.push('<span class="glyphicon glyphicon-screenshot"></span>');
                        _html.push('<span class="th-label">'+n.localizedname+'</span>');
                        _html.push('</li>');
                    }
                });
                $('#attributes').html(_html.join(''));
            });
        }
        //加载过滤条件字段选项
        function loadFilterAttributes() {
            var entityid = Xms.Web.SelectedValue($('#entities')) || $('#EntityId').val();
            var _mainOptions = new Array(), _relatedOptions = new Array();
            Xms.Schema.GetAttributesByEntityId(entityid,  function (data) {
                if (!data) return;
                _mainOptions.push('<optgroup label="字段">');
                console.log(data)
                $(data).each(function (i, n) {
                    _mainOptions.push('<option value="' + n.name + '" data-entityid="'+n.entityid+'" data-entityname="' + n.entityname + '" data-type="' + n.attributetypename + '">' + n.localizedname + '</option>');
                });
                _mainOptions.push('</optgroup>');
                Xms.Schema.GetEntityRelations( entityid ,null, function (data) {
                    if (!data) {
                        $('#filternamelist').append($(_mainOptions.join('') + _relatedOptions.join('')));
                        $('#filterConditions > tfoot > tr:first').find('select[name=filtername]').append($(_mainOptions.join('') + _relatedOptions.join('')));
                        return;
                    }
                    Relationships = data;
                    _relatedOptions.push('<optgroup label="关联">');
                    $(data).each(function (ii, nn) {
                        _relatedOptions.push('<option value="' + nn.referencedattributename + '" data-entityname="' + nn.referencedentityname + '" data-type="' + nn.referencedattributetypename + '">' + nn.referencingattributelocalizedname + '(' + nn.referencedentitylocalizedname + ')' + '</option>');
                    });
                    _relatedOptions.push('</optgroup>');
                    $('#filternamelist').append($(_mainOptions.join('') + _relatedOptions.join('')));
                    $('#filterConditions > tfoot > tr:first').find('select[name=filtername]').append($(_mainOptions.join('') + _relatedOptions.join('')));
                });
            });
        }
        //加载操作符
        function loadOperators(target, type) {
            target.empty();
            var operators = Xms.Fetch.ConditionOperators[type];
            //操作符
            var op = new Array();
            $(operators).each(function (i, n) {
                op.push('<option data-value="' + n[0] + '" value="' + n[1] + '">' + n[2] + '</option>');
            });
            target.append(op.join(''));
        }
        function getDdlItems(datatype) {
            var items = [];
            if (datatype == 'picklist') {
                items = [{ value: 0, text: '已提交' }, { value: 1, text: '审核中' }];
            } else if (datatype == 'state') {
                items = [{ value: 0, text: '否' }, { value: 1, text: '是' }];
            } else if (datatype == 'bit') {
                items = [{ value: 0, text: '否' }, { value: 1, text: '是' }];
            }
            return items;
        }
        //字段选择后更改操作符
        function onChangeAttribute(e) {
            var $this = $(e);
            var target = $this.parents('tr').find('select[name=filteroperator]');
            var type = $this.find('option:selected').attr('data-type');
            loadOperators(target, type);
            target.change();
        }
        //列移动排序
        function moveColumn(direction) {
            var $this = $("#views").find('.selected');
            if (direction == 'before' && $this.prev().length > 0) {
                $this.insertBefore($this.prev());
            }
            else if (direction == 'after' && $this.next().length > 0) {
                $this.insertAfter($this.next());
            }
            saveGridConfig();
        }
        //删除列
        function removeColumn() {
            var $this = $("#views").find('.selected');
            var index = $this.index();
            console.log(index);
            var delSelf = $("#views").find('th:eq(' + index + ')');
            var delOneSort = false;
            var attrname = $this.attr('data-name');
            var attrrelashipname= $this.attr('data-relationship');
            if ($('#views').find('th').length > 1) {
                if (delSelf.hasClass('shadow')) {
                    index = -1;
                }
                //还原左边列表start
                var attrEntities = $('#entities').find('option:selected');
                var FRelationship = attrEntities.attr('data-relationship').toLowerCase();
                var TRelationship = delSelf.attr('data-relationship').toLowerCase();
                for (var i = 0; i < AttributesList.length; i++) {
                    if (AttributesList[i].name.toLowerCase() == delSelf.attr('data-name').toLowerCase() && AttributesList[i].relationship.toLowerCase() == TRelationship.toLowerCase()) {
                        if (FRelationship == TRelationship) {
                            $(AttributesList[i].html).find('span').removeClass('hide');
                            $('#attributes').append(AttributesList[i].html);
                        }
                        AttributesList.splice(i, 1);
                        break;
                    }
                }
                //还原左边列表end
                //排序设置start
                if (typeof delSelf.attr('data-sorttype') != 'undefined' && typeof delSelf.attr('data-sortnum') != 'undefined' && delSelf.attr('data-sortnum') == 'one') {
                    delOneSort = true;
                }
                //排序设置end
                delSelf.remove();
                if(!$("#views").parents('table:first').find('tr').find('td:eq(' + index + ')').hasClass('shadow')) {
                    $("#views").parents('table:first').find('tr').find('td:eq(' + index + ')').remove();
                }
                saveGridConfig();
                if ($('#views').find('th').length == 1) {
                    $("#views").parents('table:first').find('.shadow').removeClass('hide');
                }
                else {
                    //如果第一个排序被删除了，默认第一个排序
                    if (delOneSort) {
                        $('#views').find('th:eq(1)').attr({ 'data-sorttype': 'ascending', 'data-sortnum': 'one' });
                    }
                }
            }
            if(attrrelashipname && attrrelashipname!=""){
                attrname = attrrelashipname.toLowerCase()+'_'+attrname;
            }
            setAggregateConfig(attrname,'')
            resetTableWidth();
            saveGridConfig();
          //  addAttributeToInput();
        }
        //编辑列参数
        function editColumnParams() {
            var $this = $("#views").find('.selected');
            var width = $this.attr('data-width');
            var visibled = $this.attr('data-visibled');
            var type = $this.attr('data-type');
            var _name = $this.attr('data-name');
            var attributename = $this.attr('data-localizedname');
            var label = $this.attr('data-label') || $this.attr('data-localizedname');
            //var sorttype = $this.attr('data-sorttype');
            $('#columnModal').find('input[name=columnwidth]').val(width);
            $('#columnModal').find('input[name=columnattributename]').val(attributename);
            $('#columnModal').find('input[name=columnlabel]').val(label).select();
            $('#columnModal').find('input[name=columnvisibled]').prop('checked', visibled);
            getAggregateConfig(type);
            setAggregateVal(_name);
            //Xms.Web.SelectedValue($('#columnModal').find('select[name=sorttype]'), sorttype);
            $('#columnModal').modal({
                keyboard: true
            })
        }
        //保存列参数设置
        function saveColumnParams() {
            var $this = $("#views").find('.selected');
            var $columnstatistical  =$('#columnstatistical');
            var width = $('#columnModal').find('input[name=columnwidth]').val();
            var visibled = $('#columnModal').find('input[name=columnvisibled]').prop('checked');
            var _name = $this.attr('data-name');
            var type = $this.attr('data-type');
            var label = $('#columnModal').find('input[name=columnlabel]').val();
            var _assValue = $columnstatistical.val();
            //var sorttype = Xms.Web.SelectedValue($('#columnModal').find('select[name=sorttype]'));
            //$this.attr('data-sorttype', sorttype);
            $this.attr('data-width', width);
            $this.attr('data-label', label);
            $this.find('.th-label').text(label);
            $this.attr('data-visibled', visibled);
            $this.attr('style', 'width:' + width + 'px;');
            $('#columnModal').modal('hide');
            $("#views").parents('table').removeClass('table');
            //reset form
            $('#columnModal').find('input[name=columnwidth]').val('');
            $('#columnModal').find('input[name=columnvisibled]').prop('checked', true);
            Xms.Web.SelectedValue($('#columnModal').find('select[name=sorttype]'), '');
            var attrtype = AggregateType[type];
            if(attrtype){
                setAggregateConfig(_name,_assValue);
            }

            saveGridConfig();
        }
        //保存列表布局
        function saveGridConfig() {
            var $layout = $('#LayoutConfig');
            try {
                if ($layout.val() != "") {
                    var grid = JSON.parse($layout.val());
                    // if (!grid.SortColumns) {
                    grid.Rows = [];
                    // }
                    //if (!grid.Rows) {
                    grid.Rows = [];
                    //}
                } else {
                    var grid = { SortColumns: [], Rows: [] };
                }
            } catch (e) {
                console.error(e);
            }
            var sortColumn = { Name: '', SortAscending: false };
            var row = { Name: '', Id: '', Cells: [] };
            var cell = { Name: '', EntityName: '', IsHidden: false, IsSortable: false, Width: 0 };
            var sortColumns = new Array(), cells = new Array(), columns = new Array(), orders = new Array();
            QueryObject.LinkEntities=[]; // 保存已添加到表格头的字段
            $("#views").find('th:not(.shadow)').each(function (i, n) {
                var column = $(n);
                var name = column.attr('data-name').toLowerCase();
                var entityname = column.attr('data-entityname').toLowerCase();
                var visibled = column.attr('data-visibled');
                var sorttype = column.attr('data-sorttype').toLowerCase();
                var width = column.attr('data-width');
                var label = column.attr('data-label');
                var relationship = column.attr('data-relationship').toLowerCase();
                //关联实体的字段名
                //var referencingattributename = column.attr('data-referencingattributename')? column.attr('data-referencingattributename').toLowerCase():'';

                //是否为关联实体字段
                if (relationship) {//如果为关联实体
                    //是否已存在
                    var le = null;
                    $(QueryObject.LinkEntities).each(function (ii, nn) {
                        if (nn.LinkToEntityName.toLowerCase() == entityname && nn.EntityAlias==relationship) {
                            le = nn;
                            return false;
                        }
                    });
                    if (le != null) {
                        if ($.inArray(name, le.Columns.Columns) < 0) {//列名不存在
                            le.Columns.Columns.push(name);
                        }
                        name = le.EntityAlias + '.' + name;//cell's name
                    }
                    else {
                        le = new LinkEntity();//生成关联实体别名
                        le.LinkToEntityName = entityname;
                        le.EntityAlias = relationship || entityname + '_' + Xms.Utility.Guid.NewGuid().ToString('N');
                        le.LinkToAttributeName = entityname + 'id';
                        le.LinkFromEntityName = QueryObject.EntityName;
                        $(Relationships).each(function (ii, nn) {//from.createdby => to.userid
                            if (nn.name.toLowerCase() == relationship && nn.referencedattributename.toLowerCase() == entityname + 'id') {
                                le.LinkFromAttributeName = nn.referencingattributename.toLowerCase();
                                return false;
                            }
                        });
                        le.Columns.Columns.push(name);
                        QueryObject.LinkEntities.push(le);
                        name = le.EntityAlias + '.' + name;//cell's name
                    }
                }
                else { columns.push(name); }
                cell = cell.constructor();//js对象为引用类型，所以需要NEW一个对象
                cell.Name = name;
                cell.EntityName = entityname;
                cell.IsHidden = !visibled;
                cell.IsSortable = sorttype != '';
                cell.Width = width;
                cell.Label = label || null;
                cells.push(cell);
                if (sorttype != '') {
                    sortColumn = sortColumn.constructor();
                    sortColumn.Name = name;
                    sortColumn.SortAscending = sorttype == 'ascending';
                    sortColumns.push(sortColumn);
                    var ord = { AttributeName: name, OrderType: sorttype == 'ascending' ? 0 : 1 };
                    orders.push(ord);
                }
            });
            row.Cells = cells;
            grid.SortColumns = sortColumns;
            grid.Rows.push(row);
            var $jslibrary = $('#jslibrary');
            if ($jslibrary.val()) {
                grid.ClientResources = $jslibrary.val();
            } else {
                grid.ClientResources = '';
            }
            
            //grid.RowCommand = saveRowCommandValue();
            console.log('提交的grid的数据',grid);
            $('#LayoutConfig').val(JSON.stringify(grid));

            QueryObject.ColumnSet.Columns = columns;
            //QueryObject.Orders = orders;
            UpdateQueryObjectOrder();
            console.log(QueryObject.LinkEntities);
            QueryObject.LinkEntities=conforLink(QueryObject.LinkEntities);//合并相关实体
            $('#FetchConfig').val(JSON.stringify(QueryObject));
        }
        //增加一行过滤条件
        function addCondition(e) {
            var newRow = $('#filterConditions > tfoot > tr:first').clone(true).removeClass('hide');
            var fname = Xms.Web.SelectedValue($(e));
            if (fname != null) {
                Xms.Web.SelectedValue(newRow.find('select[name=filtername]'), fname);
            }
            onChangeAttribute(newRow.find('select[name=filtername]').get(0));
            $('#filterConditions > tbody').append(newRow);
            $('#filterConditions > tbody').find('tr:last').find('select[name=filteroperator]').change();
            Xms.Web.SelectedValue($(e), '');
        }
        //清空过滤条件
        function clearConditions() {
            Xms.Web.Confirm('确认', '确定清空所有过滤条件？', function () {
                $('#filterConditions tbody tr:visible').remove();
            });
        }
        //过滤条件组合
        function groupConditions(logical) {
            var rows = $('#filterConditions tbody tr.active');
            if (rows.length < 2) {
                Xms.Web.Alert(false, '请选择2个条件以上');
                return;
            }
            //检测
            //rows.each(function (i, n) {
            //    if (row.is('.filterrow')) {
            //        //如果是组合内，则更改组合符号
            //        if (row.parents('tr.filtergroup').first()) {
            //            row.parents('tr.filtergroup').first().find('td:first').find('.dropdown-menu > li:eq(1)').trigger('click');
            //        }
            //    }
            //    else if (row.is('.filtergroup')) {
            //        removenode.push(row.parents('tr.filterrow'));
            //        var node = $('<tr class="filterrow"><td colspan="4"><table class="table table-condensed"><tbody></tbody></table></td></tr>');
            //        node.find('tbody').append(row);
            //        parent.find('#' + grouplistid).append(node);
            //    }
            //    //如果两个选项跨组合，或跨实体，则取消
            //    //...
            //});
            var container = new Array();
            var grouplistid = 'grouplist_' + Math.round(new Date().getTime() / 1000);
            var insertObj, pos;
            if (rows.first().prev().length == 0) {//第一行
                if (rows.last().next().length > 0) {
                    insertObj = rows.last().next();
                    pos = 'before';
                }
                else {
                    insertObj = rows.first().parent();
                    pos = 'append';
                }
            }
            else {
                insertObj = rows.first().prev();
                pos = 'after';
            }
            container.push('<tr class="filterrow"><td colspan="4">');
            container.push('<table class="table table-condensed"><tbody><tr class="filtergroup" data-logical="' + logical + '" data-groupid="' + grouplistid + '">');
            container.push('<td class="bg-info text-primary" style="vertical-align:middle;">');
            container.push('<div class="dropdown"><input type="checkbox" name="filtergroup" />');
            container.push('<a class="dropdown-toggle" data-toggle="dropdown" href="#"><span name="logicaltext">' + (logical == 'and' ? '并且' : '或者') + '</span> <span class="caret"></span></a>');
            container.push('<ul class="dropdown-menu">');
            container.push('<li><a class="btn-link" onclick="javascript:cancelGroup(this,\'' + grouplistid + '\')">取消组合</a></li>');
            container.push('<li><a class="btn-link" onclick="javascript:changeGroupLogical(this)">转换为"' + (logical != 'and' ? '并且' : '或者') + '"组合</a></li>');
            container.push('</ul></div>');
            container.push('</td>');
            container.push('<td colspan="3">');
            container.push('<table class="table table-condensed"><tbody name="grouplist" id="' + grouplistid + '">');
            /********放置条件********/
            container.push('</tbody></table>');
            container.push('</td>');
            container.push('</tr>');
            container.push('</tbody></table>');
            container.push('</td></tr>');
            var parent = $(container.join('\n'));
            var removenode = new Array();
            rows.each(function (i, n) {
                var row = $(n);
                row.removeClass('active').find(':checkbox').prop('checked', false);
                row.find('tr').removeClass('active');
                if (row.is('.filterrow')) {
                    parent.find('#' + grouplistid).append(row.clone(true));
                    //if (row.parents('tr.filterrow').first()) removenode.push(row.parents('tr.filterrow').first());
                    row.remove();
                }
                else if (row.is('.filtergroup')) {
                    removenode.push(row.parents('tr.filterrow:first'));
                    var node = $('<tr class="filterrow"><td colspan="4"><table class="table table-condensed"><tbody></tbody></table></td></tr>');

                    node.find('tbody').empty().append(row.clone(true));
                    parent.find('#' + grouplistid).append(node);
                    row.remove();
                }
            });
            console.log(pos);
            if (insertObj.is('tr')) {
                if (pos == 'before') insertObj.before(parent);
                else insertObj.after(parent);
                //insertObj.remove();
                $(removenode).each(function (i, n) { $(n).remove(); });
            }
            else {
                insertObj.append(parent);
                //insertObj.find('.filterrow:first').remove();
            }
            ////$(removenode).each(function (i, n) { $(n).remove(); });
        }
        //设置组合逻辑
        function changeGroupLogical(e) {
            var logical = $(e).parents('table').first().find('[data-logical]').attr('data-logical');
            logical = logical == 'and' ? 'or' : 'and';
            $(e).parents('table').first().find('[data-logical]').attr('data-logical', logical)
            $(e).parents('td').first().find('[name=logicaltext]').text(logical == 'and' ? '并且' : '或者');
            $(e).text('转换为"' + (logical != 'and' ? '并且' : '或者') + '"组合');
        }
        //取消组合
        function cancelGroup(e, groupid) {
            var g = $(e).parents('td').first();
            var rows = $('#' + groupid).children();
            $('#filterConditions tr.filtergroup[data-groupid=' + groupid + ']').replaceWith(rows);
            g.remove();
        }
        //保存过滤条件
        function saveFilter() {

            var mainGroup = $('.form-group[data-type="Main"]').children('.andorGroup,.pilot-row').not('[data-relevant=true]');
            QueryObject.Criteria = eachGroup(mainGroup,  true);
            var relaveList=$('.form-group[data-type="Main"]').children('.relevant-box');
            var rItem=eachRelevant(relaveList,EntityName);
            for(var j=QueryObject.LinkEntities.length-1;0<=j;j--){
                if(QueryObject.LinkEntities[j].Columns.Columns.length>0){
                    QueryObject.LinkEntities[j].LinkCriteria=new Xms.Fetch.FilterExpression(Xms.Fetch.LogicalOperator.And);
                    QueryObject.LinkEntities[j].LinkEntities=[];
                }else{
                    QueryObject.LinkEntities.splice(j,1);
                }
            }
            for(var i=0;i<rItem.length;i++){
                QueryObject.LinkEntities.push(rItem[i]);
            }
            QueryObject.LinkEntities=conforLink(QueryObject.LinkEntities);//合并相关实体
            console.log("filerResult",QueryObject);
            $('#FetchConfig').val(JSON.stringify(QueryObject));
            $('#filterModal').modal('hide');
        }
        function conforLink(linkEntity) {
            var oldItem=linkEntity;
            var newItem=[];
            for(var i=oldItem.length-1;0<=i;i--){
                if(oldItem[i].Columns.Columns.length>0){
                    newItem.push(oldItem[i]);
                    oldItem.splice(i,1);
                }
            }
            for(var j=0;j<newItem.length;j++){
                for(var m=oldItem.length-1;0<=m;m--){
                    if(newItem[j].EntityAlias.toLowerCase()==oldItem[m].EntityAlias.toLowerCase()){
                        newItem[j].LinkCriteria=oldItem[m].LinkCriteria;
                        newItem[j].LinkEntities=oldItem[m].LinkEntities;
                        oldItem.splice(m,1);
                    }
                }
            }
            for(var k=oldItem.length-1;0<=k;k--){
                for(var p=0;p<newItem.length;p++){
                    if(newItem[p].EntityAlias.toLowerCase()==oldItem[k].EntityAlias.toLowerCase()){
                        newItem.splice(p,1);
                    }
                }
                newItem.push(oldItem[k]);
            }
            return newItem;
        }

        function openFilter(){
            if($('#pliot-page1').length>0){
                $('#filterModal').modal('show');
                var isload=$('#pliot-page1').attr('data-load');
                if(typeof isload=='undefined'){
                    $('#pliot-page1').attr('data-load',false);
                    isload=$('#pliot-page1').attr('data-load');
                }
                if(isload==false||isload=='false'){
                    initFilter(FetchConfig,$('#pliot-page1').find('div[data-type="Main"]'));
                    $('#pliot-page1').attr('data-load',true);
                }
            }
            else{
                Xms.Web.Alert(false,'请等待加载完毕后再点击');
            }
        }
        //排序设置start
        function openSortModal() {
            if (AttributesList.length == 0) {
                Xms.Web.Alert(false, "没有可排序字段");
                return false;
            }
            var target = $('#sortModal');
            target.modal('show');
            var sort1 = target.find('#sortparm1');
            var sort2 = target.find('#sortparm2');
            var sorttype1 = target.find('input[name="sorttype1"]');
            var sorttype2 = target.find('input[name="sorttype2"]');
            sort1.html('');
            sort2.html('');
            sort2.append('<option value="">选择</option>');
            console.log('AttributesList',AttributesList);
            for (var i = 0; i < AttributesList.length; i++) {
                var _html = '<option data-relationship="' + AttributesList[i].relationship + '" data-name="' + AttributesList[i].name + '">' + AttributesList[i].text + '</option>';
                sort1.append(_html);
                sort2.append(_html);
            }
            var oneChoose = $('#views').find('th[data-sortnum="one"]');
            var twoChoose = $('#views').find('th[data-sortnum="two"]');

            if (oneChoose.length>0) {
                console.log(oneChoose.attr('data-name'))
                var relationship = oneChoose.attr('data-relationship');
                if(relationship && relationship!=""){
                    sort1.find('option[data-relationship="' + oneChoose.attr('data-relationship') + '"][data-name="' + oneChoose.attr('data-name') + '"]').attr('selected', 'selected');
                }else{
                    sort1.find('option[data-name="' + oneChoose.attr('data-name') + '"]').attr('selected', 'selected');
                }
                target.find('input[name="sorttype1"][value="' + oneChoose.attr('data-sorttype').toLowerCase()+ '"]').attr('checked', 'checked');
            }
            if (twoChoose.length > 0) {
                console.log(twoChoose.attr('data-name'))
                var relationship = oneChoose.attr('data-relationship');
                if(relationship && relationship!=""){
                    sort2.find('option[data-relationship="' + twoChoose.attr('data-relationship') + '"][data-name="' + twoChoose.attr('data-name') + '"]').attr('selected', 'selected');
                }else{
                    sort2.find('option[data-name="' + twoChoose.attr('data-name') + '"]').attr('selected', 'selected');
                }

                target.find('input[name="sorttype2"][value="' + twoChoose.attr('data-sorttype').toLowerCase() + '"]').attr('checked', 'checked');
            }
            changeSort(sort1);
            changeSort(sort2);
        }
        function changeSort(e) {
            var target = $('#sortModal');
            //target.find('option').removeClass('hide');
            var choose = $(e).find('option:selected');
            var sibling = $(e).parents('div.form-group').siblings().find('select');
            var cRelationship = choose.attr('data-relationship');
            var cName = choose.attr('data-name');
            sibling.find('option').removeClass('hide');
            sibling.find('option[data-relationship="' + cRelationship + '"][data-name="' + cName + '"]').addClass('hide');
        }
        function saveSortParams() {
            var target = $('#sortModal');
            var sort1 = target.find('#sortparm1');
            var sort2 = target.find('#sortparm2');
            $('#views').find('th').attr({ 'data-sorttype': '' ,'data-sortnum':''});
            target.find('option:selected').each(function (i,n) {
                var relationship = $(n).attr('data-relationship');
                var name = $(n).attr('data-name');
                var sorttype = $(n).parent('select').parent('div').next().find('input:checked').val();
                var label = $('#views').find('th[data-relationship="' + relationship + '"][data-name="' + name + '"]');
                label.attr('data-sorttype', sorttype);
                if ($(n).parent('select').attr('id') == 'sortparm1') {
                    label.attr('data-sortnum', "one");
                }
                else {
                    label.attr('data-sortnum', "two");
                }
            });
            saveGridConfig();
            target.modal('hide');
        }
        function UpdateQueryObjectOrder() {
            var target = $('#views');
            var oneSort = target.find('th[data-sortnum="one"]');
            var twoSort = target.find('th[data-sortnum="two"]');
            var sortColumn = { Name: '', SortAscending: false };
            var orders = new Array();
            var sortColumns = new Array();
            if (oneSort.length > 0)
            {
                //保存第一个筛选
                var onename = oneSort.attr('data-name');
                var onesorttype = oneSort.attr('data-sorttype');
                var onerelationship = oneSort.attr('data-relationship');
                onesorttype = onesorttype && onesorttype.toLowerCase();
                sortColumn = sortColumn.constructor();
                sortColumn.Name = onename;
                sortColumn.SortAscending = onesorttype == 'ascending';
                sortColumns.push(sortColumn);
                var oneord = '';
                if (onerelationship != '') {
                    oneord = { AttributeName: onerelationship + '.' + onename, OrderType: onesorttype == 'ascending' ? 'Ascending' : 'Descending' };
                }
                else {
                    oneord = { AttributeName: onename, OrderType: onesorttype == 'ascending' ? 'Ascending' : 'Descending' };
                }
                orders.push(oneord);
                if (twoSort.length > 0)
                {
                    //保存第二个筛选
                    var twoname = twoSort.attr('data-name');
                    var twosorttype = twoSort.attr('data-sorttype');
                    var tworelationship = twoSort.attr('data-relationship');
                    tworelationship = tworelationship && tworelationship.toLowerCase();
                    sortColumn = sortColumn.constructor();
                    sortColumn.Name = twoname;
                    sortColumn.SortAscending = twosorttype == 'ascending';
                    sortColumns.push(sortColumn);
                    var twoord = '';
                    if (tworelationship != '') {
                        twoord = { AttributeName: tworelationship + '.' + twoname, OrderType: twosorttype == 'ascending' ? 'Ascending' : 'Descending' };
                    }
                    else {
                        twoord = { AttributeName:twoname, OrderType: twosorttype == 'ascending' ? 'Ascending' : 'Descending' };
                    }
                    orders.push(twoord);
                }
            }
            QueryObject.Orders = orders;
        }
        //排序设置END
        function LinkEntity() {
            var self = new Object();
            self.LinkFromEntityName = '';
            self.LinkFromAttributeName = '';
            self.LinkToEntityName = '';
            self.LinkToAttributeName = '';
            self.LinkCriteria=new Xms.Fetch.FilterExpression(Xms.Fetch.LogicalOperator.And);
            self.JoinOperator = 1;
            self.EntityAlias = '';
            self.FromEntityAlias = '';
            self.Columns = { Columns: [] };
            return self;
        }
        function FilterExpression() {
            var self = new Object();
            self.FilterOperator = 'and';
            self.Conditions = new Array();
            self.Filters = new Array();
            return self;
        }
        function ConditionExpression() {
            var self = new Object();
            self.AttributeName = '';
            self.Operator = '';
            self.Values = new Array();
            return self;
        }
        function Save(type) {
            savetype = type;
            if ($('#isShowTab').prop('checked')) {
                var _rowConfig = $('#LayoutConfig').val();
                var _rowObj = JSON.parse(_rowConfig);
                _rowObj.ExtEntityTabs = getExtEntityInfo();
                $('#LayoutConfig').val(JSON.stringify(_rowObj));
            } else {
                var _rowConfig = $('#LayoutConfig').val();
                var _rowObj = JSON.parse(_rowConfig);
                delete _rowObj.ExtEntityTabs;
                $('#LayoutConfig').val(JSON.stringify(_rowObj));
            }
            $("#savetype").val(savetype);
            $("#editform").submit();
        }
        function Reset() {
            $("#editform").reset();
        }

        //过滤条件设置--行事件设置

        //禁用输入框
        var disabledArr=['Last7Days','LastWeek','LastMonth','LastYear','LastYear','NextWeek','NextMonth','NextYear','ThisWeek','ThisMonth','ThisYear','Today','Tomorrow','Yesterday'];
        //显示时间控件
        var showDatepicker=['Equal','NotEqual','GreaterThan','LessThan','GreaterEqual','LessEqual','OnOrAfter','OnOrBefore'];
        //无需查找按钮
        var noFindButton=['BeginsWith','DoesNotBeginWith','EndsWith','DoesNotEndWith','Like','NotLike'];
        //需要下拉 多选
        var moreSelect=[];
        //包含和不包含
        var includeNull=['NotNull','Null'];


        //function initRowCommandSettings(){
        //    var $rowcommand = $('#rowcommand');
        //    var rowFirst = $rowcommand.find('.well:first');
        //    rowFirst.find('.EventType');
        //}

        function loadFilterOperators(input,type,opts){
            //操作符
            var _operators = Xms.Fetch.ConditionOperators[type];
            var op = new Array();
            op.push('<option data-value="" value="">'+LOC_FILTER_CONDITION_OPERATOR_SELECT+'</option>');
            $(_operators).each(function(i, n){
                op.push('<option data-value="'+n[0]+'" value="'+n[1]+'">'+n[2]+'</option>');
            });
            $(input).html(op.join(''));

        }

        function addView(){

            var view = $('.well:first','#rowcommand').clone();
            addAttributeToInput(view);
            $('.well:last','#rowcommand').after(view);
            $('.well:last','#rowcommand').show();
            console.log('addView',$('.well:first .judgeView','#rowcommand'));
            view.find('.colorpicker').spectrum({
                flat: false,
                preferredFormat:'rgb'
            });
            saveRowCommandValue();
            return view;
        }
        function removeView(obj){
            $(obj).parent('.well').remove();
            saveRowCommandValue();
        }
        function checkAdd(obj,isParent){


            var ddd = $('.judgeView:first','#rowcommand>.well:first').clone();
            console.log('dddddd',ddd);
            if(!isParent){
                $(obj).parents('.judgeBox').find('.judgeView:last').after(ddd);
                $(obj).parents('.judgeBox').find('.addMove:last').removeClass('glyphicon-plus').addClass('glyphicon-minus').attr('onclick','removeBox(this)');
            }else{
                $(obj).find('.judgeView:last').after(ddd);
                $(obj).find('.addMove:last').removeClass('glyphicon-plus').addClass('glyphicon-minus').attr('onclick','removeBox(this)');
            }
            if($(obj).parents('.judgeBox').length>0){
                $(obj).parents('.judgeBox').css({'border':'1px solid #ccc','background':'#fff','border-radius':'10px'});
            }else{
                $(obj).find('.judgeBox').css({'border':'1px solid #ccc','background':'#fff','border-radius':'10px'});
            }
            console.log('checkAdd',$(obj));
            saveRowCommandValue();
            return ddd;
        }
        function removeBox(obj){
            $(obj).parent('.judgeView').remove();
            saveRowCommandValue();
        }

        //加载字段
        function loadRowCommondAttributes(callback) {
            var entityid =  $('#EntityId').val();
            var $attrsInput = $('.ziduan',"#rowcommand");
            if(rowcommondAttributes!=null){
                var attrHtmls = [];
                attrHtmls.push('<option value="">请选择</option>');
                $(rowcommondAttributes).each(function (i, n) {
                    attrHtmls.push('<option data-relationship="'+n.relationship+'" data-type="'+n.attributetypename+'" data-referencingattributelocalizedname="'+n.referencingattributelocalizedname+'" data-name="'+n.name+'" data-entityname="'+n.entityname+'" data-referencingattributename="'+n.referencingattributename+'" data-referencedentityid="'+n.referencedentityid+'" data-entitylocalizedname="'+n.entitylocalizedname+'" value="'+n.name+'" data-optionsetid="'+(n.optionsetid || "")+'" data-attributesid="'+n.attributesid+'" >'+n.localizedname+'</option>');
                });
                $attrsInput.html(_html.join(''));
                $attrsInput.each(function(){
                    var $this = $(this);
                    var oldValue= $this.val();
                    $this.html(attrHtmls.join(''));
                    console.log('addAttributeToInput',attrHtmls);
                    $this.val(oldValue);
                });
                saveRowCommandValue();
                callback && callback();
            }

        }

        function addAttributeToInput(_context){
            var entityid =  $('#EntityId').val();
            _context = _context ||"#rowcommand"
            var $attrsInput = $('.ziduan',_context);
            if(rowcommondAttributes!=null){
                var attrHtmls = [];
                attrHtmls.push('<option value="">请选择</option>');
                $(rowcommondAttributes).each(function (i, n) {
                    attrHtmls.push('<option data-relationship="'+n.relationship+'" data-type="'+n.attributetypename+'" data-referencingattributelocalizedname="'+n.referencingattributelocalizedname+'" data-name="'+n.name+'" data-entityname="'+n.entityname+'" data-referencingattributename="'+n.referencingattributename+'" data-referencedentityid="'+n.referencedentityid+'" data-entitylocalizedname="'+n.entitylocalizedname+'" value="'+n.name+'" data-optionsetid="'+(n.optionsetid || "")+'" data-attributesid="'+n.attributesid+'" >'+n.localizedname+'</option>');
                });
                $attrsInput.html(attrHtmls.join(''));
                $attrsInput.each(function(){
                    var $this = $(this);
                    var oldValue= $this.val();
                    $this.html(attrHtmls.join(''));
                    console.log('addAttributeToInput',attrHtmls);
                    $this.val(oldValue);
                });
                saveRowCommandValue();
               //callback && callback();
            }
        }

        function rowlookupCallback(result, inputid){
            console.log(result,inputid);
            $('#' + inputid).val(result[0].name);
            $('#' + inputid).attr('data-value',result[0].id);
            saveRowCommandValue();
        }

        function saveRowCommandValue(){
            var $rowcommand = $("#rowcommand");
            var res = [];
            var flag = true;
            if($rowcommand.find('.well:gt(0)').length>0){
                $rowcommand.find('.well:gt(0)').each(function(){
                    var $this = $(this);
                    var LogicalOperator = $this.find('.LogicalOperator').val();
                    var ActionType = $this.find('.ActionType').val();
                    var EventType = $this.find('.EventType').val();
                    var actions = {};
                    $this.find('.actionSet').each(function(i,n){
                        var _key = $(this).attr('data-key');
                        actions[_key] = $(this).find('.ColorSite').children().val();
                    });
                    var _obj ={
                        "LogicalOperator":LogicalOperator,
                        "Conditions": [],
                        "ActionType": ActionType,
                        "Action": actions,
                        "EventType":EventType
                    }
                    var _condition = [];
                    console.log($this.find('.judgeBox>.judgeView:gt(0)'));
                    $this.find('.judgeBox>.judgeView').each(function(i,n){
                        var $n = $(this);
                        var attrname = $n.find('.ziduan').val();
                        var attrtype= $n.find('.ziduan>option:selected').attr('data-type');
                        var oper = $n.find('.Operator').val();
                        var value = [];
                        console.log(' $n.find(".ziduan")',attrtype)
                        $n.find('.Values').each(function(){
                            if(attrtype=='lookup' || attrtype=='customer' || attrtype=='owner'){
                                value.push($(this).find('input[name="value"]').attr('data-value'));
                            }else{
                                value.push($(this).find('input[name="value"]').val());
                            }
                        });
                        _condition.push({
                            "AttributeName": attrname,
                            "Operator": oper,
                            "Values": value
                        });
                        if (attrname == "" || oper == "") {
                            flag = false;
                            return false;
                        }
                    });
                    console.log(_condition);
                    _obj.Conditions = _condition;
                    res.push(_obj);
                });
            }
            if (flag == true && res.length > 0) {
                var _rowConfig = $('#LayoutConfig').val();
                var _rowObj = JSON.parse(_rowConfig);
                _rowObj.RowCommand = res;
                console.log('提交的grid的数据',res);
                $('#LayoutConfig').val(JSON.stringify(_rowObj));
            }else if(flag==false || res.length==0){
                var _rowConfig = $('#LayoutConfig').val();
                var _rowObj = JSON.parse(_rowConfig);
                delete _rowObj.RowCommand;
                console.log('提交的grid的数据',res);
                $('#LayoutConfig').val(JSON.stringify(_rowObj));
            }
            if (flag == true) {
                return res;
            } else {
                return false;
            }
        }

        function resetFilterCnName(entityid, callback, type) {
            if (!type) {
                var params = {
                    type: "queryview" + entityid,
                    data: {getall:true, entityid:entityid}
                }
                Xms.Web.PageCache('workflow', '/api/schema/attribute?__r=' + new Date().getTime(), params, function (data) {
                    callback && callback(data);
                });
            } else {
                var enParam = {
                    type: 'referencingentityid' + entityid,
                    data: { referencingentityid: entityid }
                }
                Xms.Web.PageCache('workflow', '/api/schema/relationship/GetReferenced/' + enParam.data.referencingentityid, null, function (result) {
                    callback && callback(result);
                });
            }
        }

        function selectRecordCallback(result, inputid) {
            $('#' + inputid).val(result[0].name);
            var valueid = inputid.replace(/_text/, '');
            $('#' + valueid).val('$webresource:' + result[0].id);
            $('#' + inputid).trigger('change');
            $('#' + valueid).trigger('change');
            var _LayoutConfig = $('#LayoutConfig').val();
            if (_LayoutConfig != "") {
                var objRowdatas = JSON.parse(_LayoutConfig);
            } else {
                var objRowdatas = {};
            }
            var jslib = $('#jslibrary');
            if (result && result.length > 0) {
                jslib.val('$webresource:' + result[0].id);
                objRowdatas.ClientResources = result;
                $('#LayoutConfig').val(JSON.stringify(objRowdatas));
            }
        }

        $(function () {
            var $rowcommand = $('#rowcommand');
            var rowCommandCn = {LogicalOperat4or:{or:"或者",and:"并且"},EventType:{onbinding:"行绑定时"},ActionType:{SetRowBackground:"设置背景"},Action:{color:'背景色'}}



            $('body').on('change','.Operator',function(){
                var type = $(this).parents('.judgeView').find('.ziduan option:selected').attr('data-type');
                var referencedentityid = $(this).parents('.judgeView:first').find('.ziduan').children('option:selected').attr('data-referencedentityid');;
                var attributeid = $(this).parents('.judgeView').find('.ziduan option:selected').attr('data-attributesid');
                var optionsetid = $(this).parents('.judgeView').find('.ziduan option:selected').attr('data-optionsetid');
                FilterDialog.bindInput($(this), $(this).parents('.judgeView').find('input[name=value]'), type, attributeid, referencedentityid, getDdlItems(type),optionsetid,undefined,{multiSelector:true})
                // operatorChange.call(this);
                saveRowCommandValue();
            });
            $('body').on('change','.judgeView .ziduan',function(){
                var operaInput = $(this).parents('.judgeView:first').find('.Operator');
                var datatype = $(this).children('option:selected').attr('data-type');
                loadFilterOperators(operaInput,datatype);
                setTimeout(function(){
                    operaInput.trigger('change');
                    // saveRowCommandValue();
                });

            });

            $('.ActionType').click(function(){
                if($('.ActionType option:selected').text()=="背景色"){
                    $('.ColorBack').show();
                }else{
                    $('.ColorBack').hide();
                }
                saveRowCommandValue();
            })
            if($('.ActionType option:selected').text()=="背景色"){
                $('.ColorBack').show();
            }else{
                $('.ColorBack').hide();
            }

            var _LayoutConfig = $('#LayoutConfig').val();
            var objRowdatas = JSON.parse(_LayoutConfig);
            var RowCommandClass = objRowdatas.RowCommand;
            var jslib = $('#jslibrary');
            if (objRowdatas.ClientResources && objRowdatas.ClientResources.length>0) {
                $('#jslibrary_text').val(objRowdatas.ClientResources[0].name);
                jslib.val('$webresource:'+objRowdatas.ClientResources[0].id);
            }
                //return false;

            var loadRowTimer = setInterval(function(){//防止实体字段未加载完时执行行事件数据会出错。
                console.log('loadaddAttributeToInput')
                if(!rowcommondAttributes)return;
                if(rowcommondAttributes){
                    addAttributeToInput();
                    // console.log('views',$('#views').find('th'))

                    clearInterval(loadRowTimer);
                    if(!RowCommandClass || RowCommandClass==''){
                        return false;
                    }

                    initRowCommand(RowCommandClass,$rowcommand);
                    saveRowCommandValue();//防止刷新后重新保存没有值
                }
            }, 100);




            function initRowCommand(datas,_context){

                console.log('initRowCommand',_row);
               // addAttributeToInput();
                //设置值
                for (var i = 0,ilen=datas.length; i <ilen ; i++) {
                    var _row = addView();
                    var iItem = datas[i];
                    $(".LogicalOperator",_row).val(iItem["LogicalOperator"]);
                    $(".EventType",_row).val(iItem["EventType"]);
                    $(".ActionType",_row).val(iItem["ActionType"]);
                    //设置事件具体操作
                    for(var k in iItem['Action']){
                        if(iItem['Action'].hasOwnProperty(k)){
                            $(".actionSet",_row).attr('data-key',k);
                            $(".actionSet",_row).find('.ColorSite').children('input:first').val(iItem["Action"][k]);
                            _row.find('.colorpicker').spectrum("set", iItem["Action"][k]);
                        }
                    }

                    //设置过滤条件
                    for(var j=0,jlen = iItem.Conditions.length; j<jlen;j++){
                        (function(k){
                            var jItem = iItem.Conditions[k];
                            if(j==0){
                                var itemFilter = _row.find('.judgeView:first');
                                var $this = itemFilter;
                            }
                            else{
                                var itemFilter = checkAdd(_row,true);
                                var $this = itemFilter;
                            }

                            var attrInput = $(".ziduan",$this);

                            var operaInput = attrInput.parents('.judgeView:first').find('.Operator');
                            var type = 'nvarchar';
                            console.log('itemFilter',jItem.Operator);
                            //设置字段
                            attrInput.val(jItem["AttributeName"]);

                            //设置操作符
                            var type = attrInput.children('option:selected').attr('data-type');
                            var isRelat = $(".ziduan",$this).find('>option:selected').attr('data-relationship');
                            var referencedentityid = $(".ziduan",$this).find('>option:selected').attr('data-referencedentityid');
                            loadFilterOperators(operaInput,type);
                            var _Operator = jItem.Operator;
                            if(_Operator*1!==0 && _Operator===''){
                                _Operator='';
                            }
                            operaInput.val(jItem.Operator);
                            operaInput.trigger('change');


                            //设置值
                            var _value =jItem.Values;
                            var valInput = attrInput.parents('.judgeView:first').find('input[name=value]');
                            if(_value && _value.length>0){
                                if(type =='lookup' ||type =='customer' ||type =='owner'){

                                    var _entityid = referencedentityid;
                                    if(isRelat){

                                    }
                                    Xms.Web.GetJson('/api/data/Retrieve/ReferencedRecord/' + referencedentityid + '/' + _value.join(',')
                                        ,null,function(response){
                                            console.log('RetrieveReferencedRecord',response)
                                            valInput.val(response.content.name);
                                            valInput.attr('data-value',_value.join(''));
                                        });

                                }else{
                                    valInput.val(_value.join(''));
                                }
                            }
                        })(j);
                    }

                }
            }
        });


        function loadextEntitys() {
            var $extEntityTabs = $('#extEntityTabs');
            var dfd = $.Deferred();
            var entityid = $('#EntityId').val();
            var isinsertEntitys = [];
            Xms.Web.GetJson('/api/schema/relationship/GetReferenced/' + entityid + '', null, function (data) {
                if (!data|| !data.content) return;
                var _htmls = ['<table class="table table-bordered table-condensed">'];
                _htmls.push('<tr>');
                _htmls.push('<td>关联实体</td><td>视图</td><td>选项卡名称</td>');
                _htmls.push('<tr>');
                $(data.content).each(function (i, n) {
                    //
                    //if (~$.inArray(n.referencedentityid, isinsertEntitys)) return true;
                    isinsertEntitys.push(n.referencedentityid);
                    var _html = '';
                    _html += '<tr>'
                    _html+='<td>'
                    _html += '<div class="extentity" data-relationship="' + n.name + '" data-entityid="' + n.entityid + '" data-referencingattributelocalizedname="' + n.referencingattributelocalizedname + '" data-referencingattributename="' + n.referencingattributename + '" data-relationshipname="' + n.name + '" data-value="' + n.referencingentityid + '">' + n.referencingentitylocalizedname + '(' + n.referencingattributelocalizedname + ')' + '</div>';
                    _html += '</td>'
                    _html += '<td>'
                    _html += '<select class="form-control relation-queryviews" ></select>';
                    _html += '</td>'
                    _html += '<td>'
                    _html += '<input class="form-control relation-inputname" value="' + (n.tabname || n.referencingentitylocalizedname + '(' + n.referencingattributelocalizedname + ')')+'" />';
                    _html += '</td>'
                    _html += '</tr>'
                    _htmls.push(_html);
                });
                _htmls.push('</table>');
                $extEntityTabs.html(_htmls.join(''));
                dfd.resolve();
            });
            return dfd.promise();
        }
        var entityquerys = {}
        function getViewid(entityid, callback, type) {
            var html = [];
            if (!entityquerys[entityid]) {
                Xms.Web.GetJson('/customize/QueryView/index?EntityId=' + entityid + '&getall=true', null, function (data) {
                    if (typeof (callback) == "function") {
                        entityquerys[entityid] = data.content.items;
                        callback.call(this,entityid);
                    }
                });
            } else {
                callback(entityid);
            }
        }
        function renderQueryoptions(datas,selectid) {
            var html = ['<option value="">请选择</option>'];
            $(datas).each(function (i, n) {
                if (selectid == n.queryviewid) {
                    html.push('<option selected value="' + n.queryviewid + '">' + n.name + '</option>');
                } else {
                    html.push('<option value="' + n.queryviewid + '">' + n.name + '</option>');
                }
            });
            return html;
        }

        function getExtEntityInfo() {
            var res = [];
            $('#extEntityTabs').find('tr').each(function () {
                var obj = {};
                obj.entityid = $(this).find('.extentity').attr('data-value');
                obj.entityname = $(this).find('.extentity').text();
                obj.queryviewid = $(this).find('.relation-queryviews').val();
                obj.tabname = $(this).find('.relation-inputname').val();
                obj.referencingattributename = $(this).find('.extentity').attr('data-referencingattributename');
                if (obj.queryviewid != '') {
                    res.push(obj);
                }
            });
            return res;
        }
        $(function () {
            $.when(loadextEntitys()).done(function () {
                
            });
           
            $('#isShowTab').xmsCheckbox({
                trueHandler: function () {
                    $('#extEntityTabs').removeClass('hide');
                    $('#extEntityTabs').find('tr').each(function () {
                        var entityid = $(this).find('.extentity').attr('data-value');
                        if (!entityid) return true;
                        var _rowConfig = $('#LayoutConfig').val();
                        var _rowObj = JSON.parse(_rowConfig);
                        var target = null;
                        if (_rowObj && _rowObj.ExtEntityTabs) {
                            target = $.queryBykeyValue(_rowObj.ExtEntityTabs, 'entityid', entityid, true);
                        }
                        var $that = $(this);
                        if (target.length > 0) {
                            $that.find('.relation-inputname').val(target[0].tabname || (target[0].entityname));
                        }
                        var $relationquery = $(this).find('.relation-queryviews');
                        getViewid(entityid,function () {
                            var datas = entityquerys[entityid];
                            if (datas) {
                                var html = renderQueryoptions(datas, (target && target.length > 0) ? target[0].queryviewid:null);
                                $relationquery.html(html);

                                
                            }
                        });
                    });

                   
                    
                    
                }
                , falseHandler: function () {
                    $('#extEntityTabs').addClass('hide');
                }
            });
        })
    </script>
}