@using Xms.Schema.Extensions;

@model Xms.Web.Models.EntityGridModel
@{
    var mainEntity = Model.EntityList.First();
    var gridid = "queryview-section-" + Guid.NewGuid().ToString("N");
}
@{
    var jsLibs = new List<string>();
    var resources = new List<Guid>();
    if (Model.IsShowButtons)
    {
        foreach (var btn in Model.RibbonButtons)
        {
            if (btn.JsLibrary.IsNotEmpty())
            {
                if (btn.JsLibrary.StartsWith("$webresource:"))
                {
                    resources.Add(Guid.Parse(btn.JsLibrary.Replace("$webresource:", "")));
                }
                else if (!jsLibs.Contains(btn.JsLibrary))
                {
                    jsLibs.Add(btn.JsLibrary);
                }
            }
        }
    }
}

<div id="@gridid" class="grid" style="border: 1px solid #eee;">
    <input type="hidden" name="allsubgirddata" value="" />
    <input type="hidden" name="tempdata" value="" />
    <input type="hidden" name="resdata" value="" />
    <div class="container-fluid" style="padding:3px;">
        <div class="toolbar">
            <div class="pull-left" style="line-height:35px;">
                @foreach (var btn in Model.RibbonButtons)
                {
                    <a class="@btn.CssClass" href="javascript:void(0)" onclick="@btn.JsAction"><span class="@btn.Icon"></span> @btn.Label</a>
                }
            </div>
            <div class="pull-right">
                <table style="position:relative;">
                    <tr>
                        <td>
                            <div class="input-group input-group-sm col-sm-4">
                                @Html.TextBoxFor(x => x.Q, new { @class = "form-control quickly-search-input", @style = "width:200px;", @placeholder = app.T["search_quickly"] })
                                <span class="input-group-btn">
                                    <button class="btn btn-default" name="clearBtn" type="button" title="@app.T["clear"]">
                                        <span class="glyphicon glyphicon-remove-sign"></span>
                                    </button>
                                    <button class="btn btn-default" name="searchBtn" type="button">
                                        <span class="glyphicon glyphicon-search"></span>
                                    </button>
                                </span>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    <div class="pos_re gridview" id="gridview">
        <div class="">
            <div class="table-responsive tableReWidth" id="tableReWidth" style="min-height:200px;max-height:300px;">
                <table class="table table-hover table-striped table-condensed datatable tableheaderResize" id="" data-pageurl="@app.Url" data-ajax="true" data-ajaxcontainer="gridview" data-sortby="@Model.SortBy.ToLower()" data-sortdirection="@Model.SortDirection" style="border-top: 1px solid lightgrey; max-width:none;">
                    <thead>
                        <tr>
                            <th width="24" data-width="24" class="tableHeaderItem" style="width:24px;"><input type="checkbox" name="checkall" /></th>
                            @{
                                int i = 0, count = Model.Grid.Rows[0].Cells.Count;
                                foreach (var cell in Model.Grid.Rows[0].Cells)
                                {
                                    var isrelated = cell.Name.IndexOf(".") > 0;
                                    var k = isrelated ? cell.Name.Split('.')[1] : cell.Name.ToLower();
                                    var label = cell.Name;
                                    Xms.Schema.Domain.Attribute attr = null;
                                    if (!isrelated)
                                    {
                                        attr = Model.AttributeList.Find(n => n.EntityId == mainEntity.EntityId && n.Name.IsCaseInsensitiveEqual(k));
                                        label = attr.LocalizedName;
                                    }
                                    else
                                    {
                                        attr = Model.AttributeList.Find(n => n.EntityName.IsCaseInsensitiveEqual(cell.EntityName) && n.Name.IsCaseInsensitiveEqual(k));
                                        //显示字段+引用字段
                                        var relationship = Model.RelationShipList.Find(n => n.Name.IsCaseInsensitiveEqual(cell.Name.Split('.')[0]));
                                        label = attr.LocalizedName + "(" + relationship.ReferencingAttributeLocalizedName + ")";
                                    }
                                    if (attr == null) { continue; }
                                    var width = i == count - 1 ? "" : "width:" + cell.Width + "px";
                                    <th class="tableHeaderItem" data-width="@cell.Width" data-name="@cell.Name.ToLower()" style="@(width)" data-label="@label" data-type="@attr.AttributeTypeName">
                                    </th>
                                    i++;
                                }

                            }
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var primaryKey = Model.AttributeList.Find(n => n.EntityId == mainEntity.EntityId && n.TypeIsPrimaryKey());
                            var primaryField = Model.AttributeList.Find(n => n.EntityId == mainEntity.EntityId && n.IsPrimaryField == true);
                            int rowNum = 0;
                        }
                        @foreach (var item in Model.Items)
                        {
                            rowNum++;
                            var lines = (item as IDictionary<string, object>).ToList();
                            var id = lines.Find(n => n.Key.IsCaseInsensitiveEqual(primaryKey.Name)).Value;
                            <tr data-dbclick="Xms.Web.OpenWindow(ORG_SERVERURL+'/entity/create?entityid=@mainEntity.EntityId&recordid=@id')" data-isinit="true">
                                <td>
                                    <input type="checkbox" name="recordid" value="@id" data-primarykey="@primaryKey.Name" />
                                </td>
                                @if (Model.IsEditable && Model.RelationShipName.IsNotEmpty())
                                {
                                    <td data-operation="true">
                                        <div class="btn-group">

                                        </div>

                                    </td>
                                }
                                @foreach (var cell in Model.Grid.Rows[0].Cells)
                                {
                                    var columnName = cell.Name.ToLower();
                                    var isrelated = columnName.IndexOf(".") > 0;
                                    var attrName = isrelated ? columnName.Split('.')[1] : columnName;
                                    Xms.Schema.Domain.Attribute attr = null;
                                    if (isrelated)
                                    {
                                        attr = Model.AttributeList.Find(n => n.EntityName.IsCaseInsensitiveEqual(cell.EntityName) && n.Name.IsCaseInsensitiveEqual(attrName));
                                    }
                                    else
                                    {
                                        attr = Model.AttributeList.Find(n => n.EntityId == mainEntity.EntityId && n.Name.IsCaseInsensitiveEqual(attrName));
                                    }
                                    var inputName = (Model.RelationShipName.IfEmpty(attr.EntityName) + "_" + attr.Name).ToLower();
                                    var required = attr.IsRequired ? "required" : "";
                                    if (attr.TypeIsPrimaryKey() || attr.TypeIsLookUp() || attr.TypeIsOwner())
                                    {
                                        columnName = attr.TypeIsPrimaryKey() ? primaryField.Name : columnName += "Name";
                                        var value = lines.Find(n => n.Key.IsCaseInsensitiveEqual(columnName)).Value;
                                        var recordid = lines.Find(n => n.Key.IsCaseInsensitiveEqual(cell.Name)).Value;
                                        <td data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-isrequired="@required" data-entityname="@attr.EntityName" data-localizedname="@attr.LocalizedName">
                                            @if (!Model.IsEditable)
                                            {
                                                <a href="@("/"+app.OrganizationUniqueName)/entity/edit?entityid=@attr.ReferencedEntityId&recordid=@recordid" target="_blank">@value</a>
                                            }
                                            else
                                            {
                                                <input type="text" class="form-control input-sm  @(isrelated ? "" : "lookup") typeahead" name="@(inputName + "_text")" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-value="@recordid" value="@value" data-lookup="@attr.ReferencedEntityId" data-entityname="@attr.EntityName" @(isrelated ? "disabled" : "") />
                                                <input type="hidden" name="@(inputName)" data-isedit="true" data-name="@attr.Name.ToLower()" data-type="lookup" data-controltype="lookup" value="@recordid" data-lookup="@attr.ReferencedEntityId" data-entityname="@attr.EntityName">
                                            }
                                        </td>
                                    }
                                    else if (attr.TypeIsPickList() || attr.TypeIsState() || attr.TypeIsStatus())
                                    {
                                        columnName += "Name";
                                        var value = lines.Find(n => n.Key.IsCaseInsensitiveEqual(columnName)).Value;
                                        var valuenum = lines.Find(n => n.Key.IsCaseInsensitiveEqual(cell.Name.ToLower())).Value;

                                        if (!Model.IsEditable)
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-attributetypename="@attr.AttributeTypeName"> @value </td>
                                        }
                                        else
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-isrequired="@required" data-entityname="@attr.EntityName" data-localizedname="@attr.LocalizedName">
                                                @if (isrelated)
                                                {
                                                    <input type="text" class="form-control input-sm" name="@(inputName)" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" value="@valuenum" disabled />
                                                }
                                                else
                                                {
                                                    var itemStr = (attr.TypeIsPickList() || attr.TypeIsStatus()) ? attr.OptionSet.Items.SerializeToJson() : attr.PickLists.SerializeToJson();
                                                    <input type="text" class="form-control input-sm @attr.AttributeTypeName" data-isedit="true" name="@(inputName)" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" value="@valuenum" data-items="@(Html.UrlEncoder.Encode(itemStr))" />
                                                }
                                            </td>
                                        }
                                    }
                                    else if (attr.TypeIsBit())
                                    {
                                        columnName += "Name";
                                        var value = lines.Find(n => n.Key.IsCaseInsensitiveEqual(columnName)).Value;
                                        String valuenum = lines.Find(n => n.Key.IsCaseInsensitiveEqual(cell.Name.ToLower())).Value + "";

                                        if (!Model.IsEditable)
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-attributetypename="@attr.AttributeTypeName"> @value </td>
                                        }
                                        else
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-isrequired="@required" data-entityname="@attr.EntityName" data-localizedname="@attr.LocalizedName">
                                                @if (isrelated)
                                                {
                                                    if (valuenum == "True")
                                                    {
                                                        valuenum = "是";
                                                    }
                                                    else if (valuenum == "False")
                                                    {
                                                        valuenum = "否";
                                                    }
                                                    else
                                                    {
                                                        valuenum = "";
                                                    }
                                                    <input type="text" class="form-control input-sm" name="@(inputName)" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" value="@valuenum" disabled />
                                                }
                                                else
                                                {
                                                    var itemStr = (attr.TypeIsPickList() || attr.TypeIsStatus()) ? attr.OptionSet.Items.SerializeToJson() : attr.PickLists.SerializeToJson();
                                                    if (valuenum == "True")
                                                    {
                                                        valuenum = "1";
                                                    }
                                                    else if (valuenum == "False")
                                                    {
                                                        valuenum = "0";
                                                    }
                                                    else
                                                    {
                                                        valuenum = "";
                                                    }
                                                    <input type="text" class="form-control input-sm @attr.AttributeTypeName" data-isedit="true" name="@(inputName)" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" data-value="@valuenum" value="@valuenum" data-items="@(Html.UrlEncoder.Encode(itemStr))" />
                                                }
                                            </td>
                                        }
                                    }
                                    else if (attr.TypeIsDateTime())
                                    {
                                        var value = lines.Find(n => n.Key.IsCaseInsensitiveEqual(columnName)).Value;
                                        value = string.Format("{0:G}", value);
                                        if (!Model.IsEditable)
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-attributetypename="@attr.AttributeTypeName"> @value</td>
                                        }
                                        else
                                        {

                                            <td data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-isrequired="@required" data-entityname="@attr.EntityName" data-localizedname="@attr.LocalizedName"><input type="text" class="form-control isvalidata input-sm datepicker datetime" data-isedit="true" name="@(inputName)" value="@value" data-dataformat="@attr.DataFormat" data-format="@attr.DataFormat" data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" @(isrelated || attr.Name.IsCaseInsensitiveEqual("createdon") || attr.Name.IsCaseInsensitiveEqual("modifiedon") ? " disabled" : "") /></td>
                                        }
                                    }
                                    else
                                    {
                                        var value = lines.Find(n => n.Key.IsCaseInsensitiveEqual(columnName)).Value;
                                        if (value != null && (attr.TypeIsDecimal()
                                                        || attr.TypeIsFloat()))
                                        {
                                            value = string.Format("{0:N2}", value);
                                        }
                                        else if (value != null && attr.TypeIsMoney())
                                        {
                                            value = string.Format("{0:N2}", value);
                                        }
                                        else if (value != null && attr.TypeIsDateTime())
                                        {
                                            value = string.Format("{0:G}", value);
                                        }
                                        //else if (attr.IsPrimaryField)
                                        //{
                                        //    value = value;//string.Format("<a href=\"/entity/create?entityid={0}&recordid={1}\" target=\"_blank\">{2}</a>", mainEntity.EntityId, id, value);
                                        //}
                                        else if (attr.TypeIsNvarchar())
                                        {
                                            if (attr.DataFormat == "url" && value != null && value.ToString().IsNotEmpty())
                                            {
                                                var link = string.Format("<a href=\"{0}\" title=\"新窗口打开\" target=\"_blank\"><span class=\"glyphicon glyphicon-share-alt\"></span></a>", value);
                                                <td data-name="@attr.Name.ToLower()" class="datatype-link" data-attributetypename="@attr.AttributeTypeName">
                                                    @link
                                                    <span class="glyphicon glyphicon-edit" onclick="$(this).hide();$(this).prev().hide();$(this).next().removeClass('hide').focus()"></span>
                                                    <input type="text" value="@value" onchange="$(this).addClass('hide');$(this).prev().show();$(this).prev().prev().show().attr('href',$(this).val());$(this).next().val($(this).val()).trigger('change');" onblur="$(this).addClass('hide');$(this).prev().show();$(this).prev().prev().show().attr('href',$(this).val());$(this).next().val($(this).val());" class="form-control hide" />
                                                    <input type="hidden" class="form-control normal-input isvalidata input-sm @attr.AttributeTypeName" data-dataformat="@attr.DataFormat" name="@(inputName)" data-name="@attr.Name.ToLower()" data-isedit="true" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" @(isrelated ? " disabled" : "") value="@value" />
                                                </td>
                                                continue;
                                            }
                                        }
                                        if (!Model.IsEditable)
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-attributetypename="@attr.AttributeTypeName"> @value </td>
                                        }
                                        else
                                        {
                                            <td data-name="@attr.Name.ToLower()" data-type="@attr.AttributeTypeName" data-isrequired="@required" data-entityname="@attr.EntityName" data-localizedname="@attr.LocalizedName"><input type="text" class="form-control normal-input isvalidata input-sm @attr.AttributeTypeName" data-dataformat="@attr.DataFormat" name="@(inputName)" data-name="@attr.Name.ToLower()" data-isedit="true" data-type="@attr.AttributeTypeName" data-controltype="@attr.AttributeTypeName" data-entityname="@attr.EntityName" @(isrelated ? " disabled" : "") value="@value" /></td>
                                        }
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
            @if (Model.PagingEnabled)
            {
                <div class="panel-footer@(Model.TotalItems > 0 ? "" : " hide")" style="padding:3px;">
                    <div class="row">
                        <div class="col-sm-4">
                            @(app.T["pagination_label"].Replace("{page}", Model.Page.ToString()).Replace("{totalpages}", Model.TotalPages.ToString()).Replace("{totalitems}", Model.TotalItems.ToString()))
                        </div>
                        <div id="page-selection" class="col-sm-8" data-total="@Model.TotalPages" data-page="@Model.Page"></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script src="/content/js/jquery.bootpag.min.js?v=@app.PlatformSettings.VersionNumber"></script>
<script src="/content/js/jquery.form.js?v=@app.PlatformSettings.VersionNumber"></script>
<script src="~/content/js/fetch.js?v=@app.PlatformSettings.VersionNumber"></script>
<script src="/content/js/xms.js?v=@app.PlatformSettings.VersionNumber"></script>
@foreach (var item in jsLibs)
{
    <script src="@item"></script>
}
<script>
    Xms.Page.PageContext.EntityId = '@Model.EntityId.Value';
    Xms.Page.PageContext.EntityName = '@Model.EntityName';
    Xms.Page.PageContext.ReferencedRecordId = @(Model.ReferencedRecordId.HasValue? "'"+Model.ReferencedRecordId.Value.ToString()+"'":"null");
    Xms.Page.PageContext.RelationShipName = '@Model.RelationShipName';
    Xms.Page.PageContext.ReferencedRecordId = @(Model.ReferencedRecordId.HasValue? "'"+Model.ReferencedRecordId.Value.ToString()+"'":"null")
</script>
<script>

    ;(function () {
        $('.breadcrumb').remove();
        function renderDefaultItems(count){
            Xms.Web.Console('xxxxxxx',GridViewModel.defaultEmptyRows);
            count = count || GridViewModel.defaultEmptyRows || 5;
            var rowcount = $(GridViewModel.sectionid + " .datatable").find("tr:gt(0)").length;//计算当前行
            for(var i=0;i<count;i++,rowcount++){
                var obj = {entityid: GridViewModel.entityid, data: {}};
                var id = Xms.Utility.Guid.NewGuid().ToString();
                obj.data.id = id;
                //referenced recordid
                if(GridViewModel.relationshipname != '' && !obj.data[GridViewModel.referencingattributename]){
                    obj.data[GridViewModel.referencingattributename] = GridViewModel.referencedrecordid;
                }
                obj.name = GridViewModel.entityname;
                obj.relationshipname = GridViewModel.relationshipname;
                var $newrow = GridViewModel.editrowmodel.clone(true);
                var childRecords = getrecords();
                childRecords.push(obj);
                setrecords(childRecords);

                $newrow.find('input[name=recordid]').val(obj.data.id);
                $newrow.show();
                //setTimeout(function(){},16.77);
                $(GridViewModel.sectionid + " .datatable").find('tbody').append($newrow);

                $newrow.find('td.row-num').text(rowcount);
            }
            //console.log('count',count);
            if(count==1){
                return $newrow;
            }
        }
        //return false;
        var GridViewModel = {
            sectionid: '#@gridid',
            gridid: '@Model.GridId',
            iseditable: @Model.IsEditable.ToString().ToLower(),
            pageUrl: $("#@gridid .datatable").attr('data-pageurl'),
            queryid: '@Model.QueryId',
            entityid: '@Model.EntityId',
            entityname: '@mainEntity.Name.ToLower()',
            entityloclaizedname: '@mainEntity.LocalizedName',
            filters: @Html.Raw(Model.Filter.SerializeToJson()),
            sortby: '@Model.SortBy',
            sortdir: '@Model.SortDirection',
            q: '@Model.Q',
            qfield: '@Model.QField',
            page: @Model.Page,
            pagesize: @Model.PageSize,
            relationshipmeta: @Html.Raw(Model.RelationShipMeta != null ? Model.RelationShipMeta.SerializeToJson() : "null"),
            relationshipname: '@Model.RelationShipName.IfEmpty("").ToLower()',
            referencedrecordid: '@Model.ReferencedRecordId',
            referencingattributename: '@(Model.RelationShipMeta != null? Model.RelationShipMeta.ReferencingAttributeName.IfEmpty("").ToLower():"")',
            nameprefix: '@Model.RelationShipName.IfEmpty(mainEntity.Name).ToLower()'+'_',
            editrowmodel : null,
            createmode: Xms.Page && Xms.Page.PageContext && Xms.Page.PageContext.RecordId==null?'local':'server',//local or server
            ajaxTable: function (count,flag) {
                var self = $(GridViewModel.sectionid + " .datatable");
                var containerId = '#' + self.attr('data-ajaxcontainer');
                self.parent().delegate('a[data-ajax="true"]', 'click', function (e) {
                    e.preventDefault();
                    var url = $(this).attr('href');
                    url = url + (url.indexOf('?') == -1 ? '?' : '&') + '__r=' + new Date().getTime();
                    GridViewModel.rebind(url);
                    return false;
                });
            },
            ajaxgrid_reset: function (count,flag) {
                GridViewModel.ajaxTable(count,flag);
                GridViewModel.pageUrl = $(GridViewModel.sectionid + " .datatable").attr('data-pageurl');
                GridViewModel.pag_init();
                Xms.Web.DataTable($(GridViewModel.sectionid + " .datatable"));
                //默认第一列为快速查找字段
                $(GridViewModel.sectionid + ' #fieldDropdown').next().find('a:eq(1)').trigger('click');
                $(GridViewModel.sectionid + ' button[name=clearBtn]:first').on('click',null,function(e){
                    $(GridViewModel.sectionid + ' #Q').val('');
                    GridViewModel.q = '';
                    GridViewModel.rebind();
                });
                $(GridViewModel.sectionid + ' button[name=searchBtn]').off('click').on('click',null,function(e){
                    GridViewModel.q = $(GridViewModel.sectionid + ' #Q').val();
                    GridViewModel.qfield = $(GridViewModel.sectionid + ' #QField').val() || '';
                    GridViewModel.rebind();
                });
                // var isrunNext = true;
                $(GridViewModel.sectionid + ' input.quickly-search-input').off('click').on("keydown",function(e){
                    e = e || window.event;
                    //if(isrunNext == false)return false;
                    //isrunNext = false;
                    if(e.keyCode==13){
                        GridViewModel.q = $(GridViewModel.sectionid + ' #Q').val();
                        GridViewModel.qfield = $(GridViewModel.sectionid + ' #QField').val() || '';
                        GridViewModel.rebind(null,function(){
                            //  isrunNext = true;
                        });
                    }
                });
            },
            pag_init: function () {
                $(GridViewModel.sectionid + ' #page-selection').bootpag({
                    total: $(GridViewModel.sectionid + ' #page-selection').attr('data-total')
                    , maxVisible: 5
                    , page: $(GridViewModel.sectionid + ' #page-selection').attr('data-page')
                    , leaps: true
                    , prev: '&lsaquo;'
                    , next: '&rsaquo;'
                    , firstLastUse: true
                    , first: '&laquo;'
                    , last: '&raquo;'
                    //, wrapClass: ''
                }).on("page", function (event, num) {
                    event.preventDefault();
                    GridViewModel.page = num;
                    GridViewModel.rebind();
                    return false;
                });
            },
            rebind: function (url,callback) {
                var url = url || '/entity/rendergridview';
                url = url + (url.indexOf('?') == -1 ? '?' : '&') + '__r=' + new Date().getTime();
                //console.log(url);
                var model = new Object();
                model.EntityId = GridViewModel.entityid;
                model.QueryId = GridViewModel.queryid;
                model.RelationShipName = GridViewModel.relationshipname;
                model.ReferencedRecordId = GridViewModel.referencedrecordid;
                model.Filter = GridViewModel.filters;
                model.Q = $.getUrlParam("q", url) || GridViewModel.q;
                model.QField = $.getUrlParam("qfield", url) || GridViewModel.qfield;
                model.SortBy = $.getUrlParam("sortby", url) || GridViewModel.sortby;
                model.SortDirection = $.getUrlParam("sortdirection", url) || GridViewModel.sortdir;
                model.Page = $.getUrlParam("page", url) || GridViewModel.page;
                model.PageSize = $.getUrlParam("pagesize", url) || GridViewModel.pagesize;
                model.IsEditable = GridViewModel.iseditable;
                model.defaultEmptyRows = GridViewModel.defaultEmptyRows;
                model.PagingEnabled = GridViewModel.pagingEnabled;
                //console.log(model);
                Xms.Web.LoadPage(url, model, function (response) {
                    Xms.Web.Console(response);
                    $(GridViewModel.sectionid).html($(response).html());
                    GridViewModel.ajaxgrid_reset();
                    callback && callback();
                    $('body').trigger('gridview.subgridRebind');
                });
            }
        };
        GridViewModel.ajaxgrid_reset();
    })();
</script>
